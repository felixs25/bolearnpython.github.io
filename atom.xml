<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>满天星辰</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xncoding.com/"/>
  <updated>2018-03-29T23:31:40.000Z</updated>
  <id>https://www.xncoding.com/</id>
  
  <author>
    <name>bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scrapy</title>
    <link href="https://www.xncoding.com/2018/03/30/python/scrapy.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/scrapy.html</id>
    <published>2018-03-30T07:32:03.144Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><pre><code>scrapy startproject project
cd project/project/spiders
scrapy genspider -t crawl spider1 spider1.com
scrapy crawl myspider -s LOG_FILE=scrapy.log
scrapy shell &lt;url&gt;
scrapy check -l
scrapy list
scrapy edit &lt;spider&gt;
scrapy view &lt;url&gt;
scrapy parse &lt;url&gt; [options]
    --spider=SPIDER: 跳过自动检测spider并强制使用特定的spider
    --a NAME=VALUE: 设置spider的参数(可能被重复)
    --callback or -c: spider中用于解析返回(response)的回调函数
    --pipelines: 在pipeline中处理item
    --rules or -r: 使用 CrawlSpider 规则来发现用来解析返回(response)的回调函数
    --noitems: 不显示爬取到的item
    --nolinks: 不显示提取到的链接
    --nocolour: 避免使用pygments对输出着色
    --depth or -d: 指定跟进链接请求的层次数(默认: 1)
    --verbose or -v: 显示每个请求的详细信息
scrapy settings --get DOWNLOAD_DELAY
scrapy runspider myspider.py
scrapy bench
</code></pre><h2 id="response-request"><a href="#response-request" class="headerlink" title="response-request"></a>response-request</h2><pre><code>FormRequest(url=&apos;http://www.viajanet.com.br/busca/resources/api/AvailabilityStatusAsync&apos;,formdata={})
request.meta[&apos;proxy&apos;] = &quot;http://{}:{}@{}:{}&quot;.format(user,pass,&apos;127.0.0.1&apos;,&apos;8118&apos;)
meta = {&apos;dont_redirect&apos;: True,&apos;handle_httpstatus_list&apos;: [301,302]}
dont_redirect
dont_filter
priority #此请求的优先级
dont_retry
handle_httpstatus_list
dont_merge_cookies
cookiejar
redirect_urls
bindaddress
dont_obey_robotstxt
download_timeout
</code></pre><h2 id="LinkExtractor"><a href="#LinkExtractor" class="headerlink" title="LinkExtractor"></a>LinkExtractor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">LinkExtractor(allow=(), deny=(), allow_domains=(), deny_domains=(), restrict_xpaths=(), tags=(&apos;a&apos;, &apos;area&apos;), attrs=(&apos;href&apos;,), canonicalize=False, unique=True, process_value=None, deny_extensions=None, restrict_css=(), strip=True)</div><div class="line">allow (a regular expression (or list of))   – 必须要匹配这个正则表达式(或正则表达式列表)的URL才会被提取｡如果没有给出(或为空), 它会匹配所有的链接｡</div><div class="line">deny (a regular expression (or list of))    – 与这个正则表达式(或正则表达式列表)的(绝对)不匹配的URL必须被排除在外(即不提取)｡它的优先级高于 allow 的参数｡如果没有给出(或None), 将不排除任何链接｡</div><div class="line">allow_domains (str or list)                 – 单值或者包含字符串域的列表表示会被提取的链接的domains｡</div><div class="line">deny_domains (str or list)                  – 单值或包含域名的字符串,将不考虑提取链接的domains｡</div><div class="line">deny_extensions (list)                      – 应提取链接时,可以忽略扩展名的列表｡如果没有给出, 它会默认为 scrapy.linkextractor 模块中定义的 IGNORED_EXTENSIONS 列表｡</div><div class="line">restrict_xpaths (str or list)               – 一个的XPath (或XPath的列表),它定义了链路应该从提取的响应内的区域｡如果给定的,只有那些XPath的选择的文本将被扫描的链接｡见下面的例子｡</div><div class="line">tags (str or list)                          – 提取链接时要考虑的标记或标记列表｡默认为 ( &apos;a&apos; , &apos;area&apos;) ｡</div><div class="line">attrs (list)                                – 提取链接时应该寻找的attrbitues列表(仅在 tag 参数中指定的标签)｡默认为 (&apos;href&apos;)｡</div><div class="line">canonicalize (boolean)                      – 规范化每次提取的URL(使用scrapy.utils.url.canonicalize_url )｡默认为 True ｡</div><div class="line">unique (boolean)                            – 重复过滤是否应适用于提取的链接｡</div><div class="line">process_value (callable)                    – 它接收来自扫描标签和属性提取每个值, 可以修改该值, 并返回一个新的, 或返回 None 完全忽略链接的功能｡如果没有给出, process_value 默认是 lambda x: x</div><div class="line">def process_value(value):</div><div class="line">    m = re.search(&quot;javascript:goToPage\(&apos;(.*?)&apos;&quot;, value)</div><div class="line">    if m:</div><div class="line">        return m.group(1)</div><div class="line">Rule(link_extractor, callback=None, cb_kwargs=None, follow=None, process_links=None, process_request=None)</div><div class="line">cb_kwargs 包含传递给回调函数的参数(keyword argument)的字典。</div><div class="line">follow 是一个布尔(boolean)值，指定了根据该规则从response提取的链接是否需要跟进。 如果 callback 为None， follow 默认设置为 True ，否则默认为 False 。</div><div class="line">process_links 是一个callable或string(该spider中同名的函数将会被调用)。 从link_extractor中获取到链接列表时将会调用该函数。该方法主要用来过滤。</div><div class="line">process_request 是一个callable或string(该spider中同名的函数将会被调用)。 该规则提取到每个request时都会调用该函数。该函数必须返回一个request或者None。 (用来过滤request)</div></pre></td></tr></table></figure>
<h2 id="内存使用扩展-Memory-usage-extension"><a href="#内存使用扩展-Memory-usage-extension" class="headerlink" title="内存使用扩展(Memory usage extension)"></a>内存使用扩展(Memory usage extension)</h2><pre><code>MEMDEBUG_ENABLED=False
是否启用内存调试(memory debugging)
MEMDEBUG_NOTIFY=[]
如果该设置不为空like:[&apos;user@example.com&apos;]，当启用内存调试时将会发送一份内存报告到指定的地址；否则该报告将写到log中
MEMUSAGE_LIMIT_MB=0
在关闭Scrapy之前所允许的最大内存数
MEMUSAGE_REPORT=False
每个spider被关闭时是否发送内存使用报告。
MEMUSAGE_WARNING_MB=0
在发送警告email前所允许的最大内存数
</code></pre><h2 id="关闭spider扩展"><a href="#关闭spider扩展" class="headerlink" title="关闭spider扩展"></a>关闭spider扩展</h2><pre><code>CLOSESPIDER_TIMEOUT = 82800
CLOSESPIDER_ITEMCOUNT
CLOSESPIDER_PAGECOUNT
CLOSESPIDER_ERRORCOUNT
</code></pre><h2 id="关闭spider"><a href="#关闭spider" class="headerlink" title="## 关闭spider"></a>## 关闭spider</h2><pre><code>scrapy.exceptions.CloseSpider(reason=&apos;cancelled&apos;)
def parse_page(self, response):
    if &apos;Bandwidth exceeded&apos; in response.body:
        raise CloseSpider(&apos;bandwidth_exceeded&apos;)
</code></pre><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><pre><code>from scrapy.mail import MailSender
mailer = MailSender()
或
mailer = MailSender.from_settings(settings)
</code></pre><h2 id="发送email"><a href="#发送email" class="headerlink" title="发送email"></a>发送email</h2><pre><code>mailer.send(to=[&quot;someone@example.com&quot;], subject=&quot;Some subject&quot;, body=&quot;Some body&quot;, cc=[&quot;another@example.com&quot;])
MAIL_FROM=&apos;scrapy@localhost&apos;
用于发送email的地址(address)(填入 ``From:``) 。
MAIL_HOST=&apos;localhost&apos;
发用邮件的SMTP主机
MAIL_PORT=25
发用邮件的SMTP端口
MAIL_USER=None
MAIL_PASS=None
用于SMTP认证，与 :setting:`MAIL_USER` 配套的密码。
MAIL_TLS=False
强制使用STARTTLS。STARTTLS能使得在已经存在的不安全连接上，通过使用SSL/TLS来实现安全连接。
MAIL_SSL=False
强制使用SSL加密连接。
</code></pre><h2 id="单spider追踪多cookie-session"><a href="#单spider追踪多cookie-session" class="headerlink" title="单spider追踪多cookie session"></a>单spider追踪多cookie session</h2><pre><code>for i, url in enumerate(urls):
    yield scrapy.Request(&quot;http://www.example.com&quot;, meta={&apos;cookiejar&apos;: i},
        callback=self.parse_page)
def parse_page(self, response):
    return scrapy.Request(&quot;http://www.example.com/otherpage&quot;,
        meta={&apos;cookiejar&apos;: response.meta[&apos;cookiejar&apos;]},
        callback=self.parse_other_page)
</code></pre><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><pre><code>Dummy策略(默认值)
RFC2616策略
HTTPCACHE_ENABLED = False
HTTPCACHE_DIR = &apos;httpcache&apos;
HTTPCACHE_IGNORE_MISSING = False
HTTPCACHE_STORAGE = &apos;scrapy.extensions.httpcache.FilesystemCacheStorage&apos;
HTTPCACHE_EXPIRATION_SECS = 0
HTTPCACHE_ALWAYS_STORE = False
HTTPCACHE_IGNORE_HTTP_CODES = []
HTTPCACHE_IGNORE_SCHEMES = [&apos;file&apos;]
HTTPCACHE_IGNORE_RESPONSE_CACHE_CONTROLS = []
HTTPCACHE_DBM_MODULE = &apos;anydbm&apos; if six.PY2 else &apos;dbm&apos;
HTTPCACHE_POLICY = &apos;scrapy.extensions.httpcache.DummyPolicy&apos;
HTTPCACHE_GZIP = False
</code></pre><h3 id="增加全局并发数"><a href="#增加全局并发数" class="headerlink" title="增加全局并发数::"></a>增加全局并发数::</h3><pre><code>CONCURRENT_REQUESTS = 100
Item Processor(即 Item Pipeline) 同时处理(每个response的)item的最大值。
CONCURRENT_ITEMS = 100
Scrapy downloader 并发请求(concurrent requests)的最大值。
CONCURRENT_REQUESTS = 16
对单个网站进行并发请求的最大值。
CONCURRENT_REQUESTS_PER_DOMAIN = 8
对单个IP进行并发请求的最大值。如果非0，则忽略 CONCURRENT_REQUESTS_PER_DOMAIN 设定， 使用该设定。 也就是说，并发限制将针对IP，而不是网站。
该设定也影响 DOWNLOAD_DELAY: 如果 CONCURRENT_REQUESTS_PER_IP 非0，下载延迟应用在IP而不是网站上。
CONCURRENT_REQUESTS_PER_IP = 0
</code></pre><h3 id="设置Log级别"><a href="#设置Log级别" class="headerlink" title="设置Log级别:"></a>设置Log级别:</h3><pre><code>LOG_ENABLED = true
LOG_ENCODING = &quot;utf-8&quot;
LOG_FILE = &quot;log/spider.log&quot;
LOG_FORMAT = &quot;%(asctime)s [%(name)s] %(levelname)s: %(message)s&quot;
LOG_DATEFORMAT = &quot;%Y-%m-%d %H:%M:%S&quot;
LOG_LEVEL = &apos;INFO&apos;#默认&apos;debug&apos;
LOG_ENCODING#logging使用的编码
LOG_STDOUT  #为 ``True``,进程所有的标准输出(及错误)将会被重定向到log中
#spider
self.logger.info(&apos;Parse function called on %s&apos;, response.url)
自定义logger
import logging
logger = logging.getLogger(&apos;zhangsan&apos;)
logger.info(&apos;Parse function called on %s&apos;, response.url)
</code></pre><h3 id="禁止cookies"><a href="#禁止cookies" class="headerlink" title="禁止cookies::"></a>禁止cookies::</h3><pre><code>COOKIES_ENABLED = False
COOKIES_DEBUG
</code></pre><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><pre><code>DOWNLOAD_TIMEOUT = 10      # 3mins
</code></pre><h3 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h3><pre><code>ROBOTSTXT_OBEY = False
</code></pre><h3 id="爬取URL的最大长度"><a href="#爬取URL的最大长度" class="headerlink" title="爬取URL的最大长度"></a>爬取URL的最大长度</h3><pre><code>URLLENGTH_LIMIT = 2083
</code></pre><h3 id="禁止重试"><a href="#禁止重试" class="headerlink" title="禁止重试::"></a>禁止重试::</h3><pre><code>RETRY_ENABLED = False
RETRY_TIMES=2
RETRY_HTTP_CODES=[500, 502, 503, 504, 400, 408]
[500, 503, 504, 400, 403, 404, 408]
</code></pre><h3 id="关闭重定向"><a href="#关闭重定向" class="headerlink" title="关闭重定向::"></a>关闭重定向::</h3><pre><code>REDIRECT_ENABLED = False
REDIRECT_MAX_TIMES=20
单个request被重定向的最大次数。
REDIRECT_MAX_METAREFRESH_DELAY=100
有些网站使用 meta-refresh 重定向到session超时页面，
因此我们限制自动重定向到最大延迟(秒)。
REDIRECT_PRIORITY_ADJUST
默认: ``+2``
修改重定向请求相对于原始请求的优先级。
负数意味着更多优先级。
</code></pre><h3 id="自动限速"><a href="#自动限速" class="headerlink" title="自动限速"></a>自动限速</h3><pre><code>AUTOTHROTTLE_ENABLED=False
AUTOTHROTTLE_START_DELAY=5.0
AUTOTHROTTLE_MAX_DELAY=60
AUTOTHROTTLE_DEBUG=False
</code></pre><h3 id="depth防止死循环"><a href="#depth防止死循环" class="headerlink" title="depth防止死循环"></a>depth防止死循环</h3><pre><code>爬取网站最大允许的深度(depth)值。如果为0，则没有限制。
DEPTH_LIMIT = 0
整数值。用于根据深度调整request优先级。
如果为0，则不根据深度进行优先级调整。
DEPTH_PRIORITY = 0
</code></pre><h3 id="广度优先顺序"><a href="#广度优先顺序" class="headerlink" title="广度优先顺序"></a>广度优先顺序</h3><pre><code>DEPTH_PRIORITY = 1
SCHEDULER_DISK_QUEUE = &apos;scrapy.squeue.PickleFifoDiskQueue&apos;
SCHEDULER_MEMORY_QUEUE = &apos;scrapy.squeue.FifoMemoryQueue&apos;
</code></pre><h3 id="error"><a href="#error" class="headerlink" title="error"></a>error</h3><pre><code>HTTPERROR_ALLOWED_CODES=[]
忽略该列表中所有非200状态码的response。
HTTPERROR_ALLOW_ALL=Flase
忽略所有response，不管其状态值。
</code></pre><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><pre><code>TELNETCONSOLE_ENABLED=True
telnet 终端是否启用。
TELNETCONSOLE_PORT
默认: ``[6023, 6073]``
</code></pre><h3 id="EDITOR"><a href="#EDITOR" class="headerlink" title="EDITOR"></a>EDITOR</h3><pre><code>默认: depends on the environment
执行 edit 命令编辑spider时使用的编辑器。 其默认为 EDITOR 环境变量。如果该变量未设置，其默认为 vi (Unix系统) 或者 IDLE编辑器(Windows)。
</code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">USER_AGENT = &apos;Scrapy/&apos;</div><div class="line">DEFAULT_REQUEST_HEADERS = &#123;</div><div class="line">    &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&apos;,</div><div class="line">    &apos;Accept-Language&apos;: &apos;en&apos;,</div><div class="line">&#125;</div><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">   &apos;mybot.pipelines.validate.ValidateMyItem&apos;: 300,</div><div class="line">   &apos;mybot.pipelines.validate.StoreMyItem&apos;: 800,</div><div class="line">&#125;</div><div class="line">将原先的配置进行覆盖</div><div class="line">class MySpider(scrapy.Spider):</div><div class="line">    name = &apos;myspider&apos;</div><div class="line">    custom_settings = &#123;</div><div class="line">        &apos;DOWNLOAD_DELAY&apos;: 1,</div><div class="line">        &apos;RANDOMIZE_DOWNLOAD_DELAY&apos;: False,</div><div class="line">        &apos;CONCURRENT_REQUESTS_PER_IP&apos;: 1,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">class MyExtension(object):</div><div class="line">    @classmethod</div><div class="line">    def from_crawler(cls, crawler):</div><div class="line">        settings = crawler.settings</div><div class="line">        if settings[&apos;LOG_ENABLED&apos;]:</div><div class="line">            print &quot;log is enabled!&quot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">DNSCACHE_ENABLED</div><div class="line">默认: ``True``</div><div class="line">DUPEFILTER_CLASS</div><div class="line">默认: ``&apos;scrapy.dupefilter.RFPDupeFilter&apos;``</div><div class="line">DUPEFILTER_DEBUG</div><div class="line">默认: ``False``</div><div class="line">SCHEDULER</div><div class="line">默认: ``&apos;scrapy.core.scheduler.Scheduler&apos;``</div></pre></td></tr></table></figure>
<h2 id="scrapyd"><a href="#scrapyd" class="headerlink" title="scrapyd"></a>scrapyd</h2><pre><code>pip install scrapyd-client
拷贝scrapyd-deploy工具到爬虫目录下
Ubuntu/Windows:
[deploy:tutorial_deploy]
url = http://192.168.17.129:6800/
project = tutorial
username = enlong
password = test
Windows:
    python c:\Python27\Scripts\scrapyd-deploy
Ubuntu:
    scrapyd-deploy tutorial_deploy -p tutorial
python scrapyd-deploy -l
scrapyd-deploy &lt;target&gt; -p &lt;project&gt; --version &lt;version&gt;
python scrapyd-deploy 127 -p projectccp --version ver20160702



1、获取状态
http://127.0.0.1:6800/daemonstatus.json
2、获取项目列表
http://127.0.0.1:6800/listprojects.json
3、获取项目下已发布的爬虫列表
http://127.0.0.1:6800/listspiders.json?project=myproject
4、获取项目下已发布的爬虫版本列表
http://127.0.0.1:6800/listversions.json?project=myproject
5、获取爬虫运行状态
http://127.0.0.1:6800/listjobs.json?project=myproject
6、启动服务器上某一爬虫（必须是已发布到服务器的爬虫）
http://localhost:6800/schedule.json （post方式，data={&quot;project&quot;:myproject,&quot;spider&quot;:myspider}）
7、删除某一版本爬虫
http://127.0.0.1:6800/delversion.json （post方式，data={&quot;project&quot;:myproject,&quot;version&quot;:myversion}）
8、删除某一工程，包括该工程下的各版本爬虫
http://127.0.0.1:6800/delproject.json（post方式，data={&quot;project&quot;:myproject}）
</code></pre><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><pre><code>TypeError
表现形式:TypeError: ‘float’ object is not iterable
相关搜索:https://github.com/scrapy/scrapy/issues/2461
解决方法:sudo pip install -U Twisted==16.6.0
ERROR: Unable to read the instance data ,giving up
表现形式: 直接error 报错，拿不到数据
相关搜索: 无
解决方法: 回调函数中，必须返回 Request 对象 或者Item对象 ，可以直接返回这种类型的数据就可以了
Library not loaded: /opt/local/lib/libssl.1.0.0.dylib (LoadError)
解决方法: brew remove openssl 先卸载，然后 brew install openssl
unknown command: crawl error
表现形式: 无法使用crawl 命令
相关搜索 : unknown-command-crawl-error
解决方法 : 切换到有scrapy.cfg文件下，然后使用命令
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;cmd&quot;&gt;&lt;a href=&quot;#cmd&quot; class=&quot;headerlink&quot; title=&quot;cmd&quot;&gt;&lt;/a&gt;cmd&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;scrapy startproject project
cd project/project/spiders
scr
    
    </summary>
    
    
      <category term="scrapy,设置" scheme="https://www.xncoding.com/tags/scrapy-%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>selenium</title>
    <link href="https://www.xncoding.com/2018/03/30/python/selenium.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/selenium.html</id>
    <published>2018-03-30T07:32:03.143Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><h2 id="–隐式等待"><a href="#–隐式等待" class="headerlink" title="–隐式等待"></a>–隐式等待</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">driver.implicitly_wait(5)</div><div class="line">driver.save_screenshot(&apos;e:\screenshot.png&apos;)</div><div class="line">driver.set_page_load_timeout(10)</div><div class="line">driver.set_script_timeout(10)</div><div class="line">text = driver.page_source</div><div class="line">COOKIES_ENABLES = False</div><div class="line">driver.close()</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h2 id="–多层框架或窗口的定位："><a href="#–多层框架或窗口的定位：" class="headerlink" title="–多层框架或窗口的定位："></a>–多层框架或窗口的定位：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">switch_to_frame()</div><div class="line">switch_to_window()</div><div class="line">driver.switch_to_frame(driver.find_element_by_id``(&quot;topmenuFrame&quot;))</div><div class="line">driver.switch_to_default_content()</div><div class="line">· text  获取该元素的文本</div><div class="line">· submit  提交表单</div><div class="line">· get_attribute  获得属性值</div><div class="line"># --处理下拉框</div><div class="line">switch_to_alert()</div><div class="line">accept()</div></pre></td></tr></table></figure>
<h2 id="–find"><a href="#–find" class="headerlink" title="–find"></a>–find</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">find_element_by_id</div><div class="line">find_element_by_name</div><div class="line">find_element_by_xpath</div><div class="line">find_element_by_link_text</div><div class="line">find_element_by_partial_link_text</div><div class="line">find_element_by_tag_name</div><div class="line">find_element_by_class_name</div><div class="line">find_element_by_css_selector</div></pre></td></tr></table></figure>
<h2 id="–cookies"><a href="#–cookies" class="headerlink" title="–cookies"></a>–cookies</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cookie = [item[&quot;name&quot;] + &quot;=&quot; + item[&quot;value&quot;] for item in driver.get_cookies()]</div><div class="line">cookiestr = &apos;;&apos;.join(item for item in cookie)</div><div class="line">driver.get_cookies（）   获得cookie信息</div><div class="line">add_cookie(cookie_dict)  向cookie添加会话信息</div><div class="line">delete_cookie(name)      删除特定(部分)的cookie</div><div class="line">delete_all_cookies()     删除所有cookie</div></pre></td></tr></table></figure>
<h2 id="–input"><a href="#–input" class="headerlink" title="–input"></a>–input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from selenium.webdriver.common.keys import Keys</div><div class="line">elem = driver.find_element_by_name(&quot;q&quot;)</div><div class="line">elem.clear()</div><div class="line">elem.send_keys(&quot;python&quot;)</div><div class="line"># click</div><div class="line">click()</div><div class="line">context_click()  右击</div><div class="line">double_click()   双击</div><div class="line">drag_and_drop()  拖动</div></pre></td></tr></table></figure>
<h2 id="–phantomjs"><a href="#–phantomjs" class="headerlink" title="–phantomjs"></a>–phantomjs</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</div><div class="line">service_args = []</div><div class="line">service_args.append(&apos;--load-images=no&apos;)  # 关闭图片加载</div><div class="line">service_args.append(&apos;--disk-cache=yes&apos;)  # 开启缓存</div><div class="line">service_args.append(&apos;--ignore-ssl-errors=true&apos;)  # 忽略https错误</div><div class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</div><div class="line"># 从USER_AGENTS列表中随机选一个浏览器头，伪装浏览器</div><div class="line">dcap[&quot;phantomjs.page.settings&quot;] = (</div><div class="line">    &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Linux; Android 4.4.2; en-us; SAMSUNG SCH-I545 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Mobile Safari/537.36&quot;&#125;)</div><div class="line"># 不载入图片，爬页面速度会快很多</div><div class="line">dcap[&quot;phantomjs.page.settings.loadImages&quot;] = False</div><div class="line">driver = webdriver.PhantomJS(</div><div class="line">    desired_capabilities=dcap, service_args=service_args)</div><div class="line">driver.get_screenshot_as_file(&apos;01.png&apos;)</div><div class="line">driver.quit()</div></pre></td></tr></table></figure>
<h2 id="–调用js"><a href="#–调用js" class="headerlink" title="–调用js"></a>–调用js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">driver.execute_async_script(js)</div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure>
<h1 id="service-args"><a href="#service-args" class="headerlink" title="service_args"></a>service_args</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">–user - data - dir =”[PATH]” 指定用户文件夹User Data路径，可以把书签这样的用户数据保存在系统分区以外的分区。</div><div class="line">–disk - cache - dir =”[PATH]“ 指定缓存Cache路径</div><div class="line">–disk - cache - size = 指定Cache大小，单位Byte</div><div class="line">–first run 重置到初始状态，第一次运行</div><div class="line">–incognito 隐身模式启动</div><div class="line">–disable - javascript 禁用Javascript</div><div class="line">--omnibox - popup - count = &quot;num&quot; 将地址栏弹出的提示菜单数量改为num个。我都改为15个了。</div><div class="line">--user - agent = &quot;xxxxxxxx&quot; 修改HTTP请求头部的Agent字符串，可以通过about: version页面查看修改效果</div><div class="line">--disable - plugins 禁止加载所有插件，可以增加速度。可以通过about: plugins页面查看效果</div><div class="line">--disable - javascript 禁用JavaScript，如果觉得速度慢在加上这个</div><div class="line">--disable - java 禁用java</div><div class="line">--start - maximized 启动就最大化</div><div class="line">--no - sandbox 取消沙盒模式</div><div class="line">--single - process 单进程运行</div><div class="line">--process - per - tab 每个标签使用单独进程</div><div class="line">--process - per - site 每个站点使用单独进程</div><div class="line">--in-process - plugins 插件不启用单独进程</div><div class="line">--disable - popup - blocking 禁用弹出拦截</div><div class="line">--disable - plugins 禁用插件</div><div class="line">--disable - images 禁用图像</div><div class="line">--incognito 启动进入隐身模式</div><div class="line">--enable - udd - profiles 启用账户切换菜单</div><div class="line">--proxy - pac - url 使用pac代理[via 1 / 2]</div><div class="line">--lang = zh - CN 设置语言为简体中文</div><div class="line">--disk - cache - dir 自定义缓存目录</div><div class="line">--disk - cache - size 自定义缓存最大值（单位byte）</div><div class="line">--media - cache - size 自定义多媒体缓存最大值（单位byte）</div><div class="line">--bookmark - menu 在工具 栏增加一个书签按钮</div><div class="line">--enable - sync 启用书签同步</div></pre></td></tr></table></figure>
<h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from selenium import webdriver</div><div class="line"># 进入浏览器设置</div><div class="line">options = webdriver.ChromeOptions()</div><div class="line"># 设置中文</div><div class="line">options.add_argument(&apos;lang=zh_CN.UTF-8&apos;)</div><div class="line">chrome_options = webdriver.ChromeOptions()</div><div class="line">chrome_options.add_argument(&apos;--headless&apos;)</div><div class="line">chrome_options.add_argument(&apos;--disable-gpu&apos;)</div><div class="line"># 更换头部</div><div class="line">options.add_argument(</div><div class="line">    &apos;user-agent=&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 2_1 like Mac OS X; ja-jp) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5F137 Safari/525.20&quot;&apos;)</div><div class="line"># 代理</div><div class="line">service_args = [&apos;--proxy=94.182.202.165:8080&apos;, &apos;--proxy-type=http&apos;]</div><div class="line">option.add_argument(&apos;--start-maximized&apos;)  # 最大化</div><div class="line">option.add_argument(&apos;--user-data-dir=E:\\Chrome\\User Data&apos;)  # 设置成用户自己的数据目录</div><div class="line">browser = webdriver.Chrome(executable_path=&apos;E:\\Chrome\\chromedriver.exe&apos;,</div><div class="line">                           chrome_options=options, service_args=service_args)</div><div class="line">url = &quot;https://httpbin.org/get?show_env=1&quot;</div><div class="line">browser.get(url)</div><div class="line">input(&quot;查看效果&quot;)</div><div class="line">browser.quit()</div><div class="line"># -chrome some crx</div><div class="line">option.add_argument(&apos;--user-agent=iphone&apos;)</div><div class="line">option.add_extension(&apos;d:\crx\AdBlock_v2.17.crx&apos;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;selenium&quot;&gt;&lt;a href=&quot;#selenium&quot; class=&quot;headerlink&quot; title=&quot;selenium&quot;&gt;&lt;/a&gt;selenium&lt;/h1&gt;&lt;h2 id=&quot;–隐式等待&quot;&gt;&lt;a href=&quot;#–隐式等待&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="浏览器,selenium" scheme="https://www.xncoding.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8-selenium/"/>
    
  </entry>
  
  <entry>
    <title>抓取动态网站</title>
    <link href="https://www.xncoding.com/2018/03/30/python/%E6%8A%93%E5%8F%96%E5%8A%A8%E6%80%81%E7%BD%91%E7%AB%99.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/抓取动态网站.html</id>
    <published>2018-03-30T07:32:03.142Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy教程12-抓取动态网站"><a href="#Scrapy教程12-抓取动态网站" class="headerlink" title="Scrapy教程12- 抓取动态网站"></a>Scrapy教程12- 抓取动态网站</h1><p>前面我们介绍的都是去抓取静态的网站页面，也就是说我们打开某个链接，它的内容全部呈现出来。
但是如今的互联网大部分的web页面都是动态的，经常逛的网站例如京东、淘宝等，商品列表都是js，并有Ajax渲染，
下载某个链接得到的页面里面含有异步加载的内容，这样再使用之前的方式我们根本获取不到异步加载的这些网页内容。</p>
<p>使用Javascript渲染和处理网页是种非常常见的做法，如何处理一个大量使用Javascript的页面是Scrapy爬虫开发中一个常见的问题，
这篇文章将说明如何在Scrapy爬虫中使用<a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="external">scrapy-splash</a>来处理页面中得Javascript。</p>
<h3 id="scrapy-splash简介"><a href="#scrapy-splash简介" class="headerlink" title="scrapy-splash简介"></a>scrapy-splash简介</h3><p>scrapy-splash利用<a href="https://github.com/scrapy/scrapy" target="_blank" rel="external">Splash</a>将javascript和Scrapy集成起来，使得Scrapy可以抓取动态网页。</p>
<p>Splash是一个javascript渲染服务，是实现了HTTP API的轻量级浏览器，底层基于Twisted和QT框架，Python语言编写。所以首先你得安装Splash实例</p>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>官网建议使用docker容器安装方式Splash。那么首先你得先安装docker</p>
<p>参考<a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/" target="_blank" rel="external">官方安装文档</a>，这里我选择Ubuntu 12.04 LTS版本安装</p>
<p>升级内核版本，docker需要3.13内核
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install linux-image-generic-lts-trusty</div><div class="line">$ sudo reboot</div></pre></td></tr></table></figure></p>
<p>安装<code>CA</code>认证
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install apt-transport-https ca-certificates</div></pre></td></tr></table></figure></p>
<p>增加新的<code>GPG</code>key
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</div></pre></td></tr></table></figure></p>
<p>打开<code>/etc/apt/sources.list.d/docker.list</code>，如果没有就创建一个，然后删除任何已存在的内容，再增加下面一句
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deb https://apt.dockerproject.org/repo ubuntu-precise main</div></pre></td></tr></table></figure></p>
<p>更新APT
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get purge lxc-docker</div><div class="line">$ apt-cache policy docker-engine</div></pre></td></tr></table></figure></p>
<p>安装
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install docker-engine</div></pre></td></tr></table></figure></p>
<p>启动docker服务
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker start</div></pre></td></tr></table></figure></p>
<p>验证是否启动成功
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run hello-world</div></pre></td></tr></table></figure></p>
<p>上面这条命令会下载一个测试镜像并在容器中运行它，它会打印一个消息，然后退出。</p>
<h3 id="安装Splash"><a href="#安装Splash" class="headerlink" title="安装Splash"></a>安装Splash</h3><p>拉取镜像下来
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker pull scrapinghub/splash</div></pre></td></tr></table></figure></p>
<p>启动容器
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -p 5023:5023 -p 8050:8050 -p 8051:8051 scrapinghub/splash</div></pre></td></tr></table></figure></p>
<p>现在可以通过0.0.0.0:8050(http),8051(https),5023 (telnet)来访问Splash了。</p>
<h3 id="安装scrapy-splash"><a href="#安装scrapy-splash" class="headerlink" title="安装scrapy-splash"></a>安装scrapy-splash</h3><p>使用pip安装
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install scrapy-splash</div></pre></td></tr></table></figure></p>
<h3 id="配置scrapy-splash"><a href="#配置scrapy-splash" class="headerlink" title="配置scrapy-splash"></a>配置scrapy-splash</h3><p>在你的scrapy工程的配置文件<code>settings.py</code>中添加
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SPLASH_URL = <span class="string">'http://192.168.203.92:8050'</span></div></pre></td></tr></table></figure></p>
<p>添加Splash中间件，还是在<code>settings.py</code>中通过<code>DOWNLOADER_MIDDLEWARES</code>指定，并且修改<code>HttpCompressionMiddleware</code>的优先级
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class="number">723</span>,</div><div class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: <span class="number">725</span>,</div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">810</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>默认情况下，HttpProxyMiddleware的优先级是750，要把它放在Splash中间件后面</p>
<p>设置Splash自己的去重过滤器
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></div></pre></td></tr></table></figure></p>
<p>如果你使用Splash的Http缓存，那么还要指定一个自定义的缓存后台存储介质，scrapy-splash提供了一个<code>scrapy.contrib.httpcache.FilesystemCacheStorage</code>的子类
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></div></pre></td></tr></table></figure></p>
<p>如果你要使用其他的缓存存储，那么需要继承这个类并且将所有的<code>scrapy.util.request.request_fingerprint</code>调用替换成<code>scrapy_splash.splash_request_fingerprint</code></p>
<h3 id="使用scrapy-splash"><a href="#使用scrapy-splash" class="headerlink" title="使用scrapy-splash"></a>使用scrapy-splash</h3><h4 id="SplashRequest"><a href="#SplashRequest" class="headerlink" title="SplashRequest"></a>SplashRequest</h4><p>最简单的渲染请求的方式是使用<code>scrapy_splash.SplashRequest</code>，通常你应该选择使用这个
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">yield</span> SplashRequest(url, self.parse_result,</div><div class="line">    args=&#123;</div><div class="line">        <span class="comment"># optional; parameters passed to Splash HTTP API</span></div><div class="line">        <span class="string">'wait'</span>: <span class="number">0.5</span>,</div><div class="line"></div><div class="line">        <span class="comment"># 'url' is prefilled from request url</span></div><div class="line">        <span class="comment"># 'http_method' is set to 'POST' for POST requests</span></div><div class="line">        <span class="comment"># 'body' is set to request body for POST requests</span></div><div class="line">    &#125;,</div><div class="line">    endpoint=<span class="string">'render.json'</span>, <span class="comment"># optional; default is render.html</span></div><div class="line">    splash_url=<span class="string">'&lt;url&gt;'</span>,     <span class="comment"># optional; overrides SPLASH_URL</span></div><div class="line">    slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN,  <span class="comment"># optional</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>另外，你还可以在普通的scrapy请求中传递<code>splash</code>请求meta关键字达到同样的效果
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">script = <span class="string">"""</span></div><div class="line">function main(splash)</div><div class="line">    local url = splash.args.url</div><div class="line">    assert(splash:go(url))</div><div class="line">    assert(splash:wait(1))</div><div class="line"></div><div class="line">    assert(splash:runjs('document.getElementsByTagName("span")[0].click()'))</div><div class="line">    assert(splash:wait(1))</div><div class="line"></div><div class="line">    -- return result as a JSON object</div><div class="line">    return &#123;</div><div class="line">        html = splash:html()</div><div class="line">    &#125;</div><div class="line">end</div><div class="line">"""</div><div class="line"><span class="keyword">yield</span> scrapy.Request(url, self.parse_result, meta=&#123;</div><div class="line">    <span class="string">'splash'</span>: &#123;</div><div class="line">        <span class="string">'args'</span>: &#123;</div><div class="line">            <span class="comment"># set rendering arguments here</span></div><div class="line">            <span class="string">'html'</span>: <span class="number">1</span>,</div><div class="line">            <span class="string">'png'</span>: <span class="number">1</span>,</div><div class="line"></div><div class="line">            <span class="comment"># 'url' is prefilled from request url</span></div><div class="line">            <span class="comment"># 'http_method' is set to 'POST' for POST requests</span></div><div class="line">            <span class="comment"># 'cookies': [],</span></div><div class="line">            <span class="comment"># 'lua_source': script,</span></div><div class="line">            <span class="comment"># 'body' is set to request body for POST requests</span></div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="comment"># optional parameters</span></div><div class="line">        <span class="string">'endpoint'</span>: <span class="string">'render.json'</span>,  <span class="comment"># optional; default is render.json</span></div><div class="line">        <span class="string">'splash_url'</span>: <span class="string">'&lt;url&gt;'</span>,      <span class="comment"># optional; overrides SPLASH_URL</span></div><div class="line">        <span class="string">'slot_policy'</span>: scrapy_splash.SlotPolicy.PER_DOMAIN,</div><div class="line">        <span class="string">'splash_headers'</span>: &#123;&#125;,       <span class="comment"># optional; a dict with headers sent to Splash</span></div><div class="line">        <span class="string">'dont_process_response'</span>: <span class="keyword">True</span>, <span class="comment"># optional, default is False</span></div><div class="line">        <span class="string">'dont_send_headers'</span>: <span class="keyword">True</span>,  <span class="comment"># optional, default is False</span></div><div class="line">        <span class="string">'magic_response'</span>: <span class="keyword">False</span>,    <span class="comment"># optional, default is True</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Splash API说明，使用<code>SplashRequest</code>是一个非常便利的工具来填充<code>request.meta[&#39;splash&#39;]</code>里的数据</p>
<ul>
<li>meta[‘splash’][‘args’] 包含了发往Splash的参数。</li>
<li>meta[‘splash’][‘endpoint’] 指定了Splash所使用的endpoint，默认是<a href="http://splash.readthedocs.org/en/latest/api.html#render-html" target="_blank" rel="external">render.html</a></li>
<li>meta[‘splash’][‘splash_url’] 覆盖了<code>settings.py</code>文件中配置的Splash URL</li>
<li>meta[‘splash’][‘splash_headers’] 运行你增加或修改发往Splash服务器的HTTP头部信息，注意这个不是修改发往远程web站点的HTTP头部</li>
<li>meta[‘splash’][‘dont_send_headers’] 如果你不想传递headers给Splash，将它设置成True</li>
<li>meta[‘splash’][‘slot_policy’] 让你自定义Splash请求的同步设置</li>
<li>meta[‘splash’][‘dont_process_response’] 当你设置成True后，<code>SplashMiddleware</code>不会修改默认的<code>scrapy.Response</code>请求。默认是会返回<code>SplashResponse</code>子类响应比如<code>SplashTextResponse</code></li>
<li>meta[‘splash’][‘magic_response’] 默认为True，Splash会自动设置Response的一些属性，比如<code>response.headers</code>,<code>response.body</code>等</li>
</ul>
<p>如果你想通过Splash来提交Form请求，可以使用<code>scrapy_splash.SplashFormRequest</code>，它跟<code>SplashRequest</code>使用是一样的。</p>
<h4 id="Responses"><a href="#Responses" class="headerlink" title="Responses"></a>Responses</h4><p>对于不同的Splash请求，scrapy-splash返回不同的Response子类</p>
<ul>
<li>SplashResponse 二进制响应，比如对/render.png的响应</li>
<li>SplashTextResponse 文本响应，比如对/render.html的响应</li>
<li>SplashJsonResponse JSON响应，比如对/render.json或使用Lua脚本的/execute的响应</li>
</ul>
<p>如果你只想使用标准的Response对象，就设置<code>meta[&#39;splash&#39;][&#39;dont_process_response&#39;]=True</code></p>
<p>所有这些Response会把<code>response.url</code>设置成原始请求URL(也就是你要渲染的页面URL)，而不是Splash endpoint的URL地址。实际地址通过<code>response.real_url</code>得到</p>
<h4 id="Session的处理"><a href="#Session的处理" class="headerlink" title="Session的处理"></a>Session的处理</h4><p>Splash本身是无状态的，那么为了支持scrapy-splash的session必须编写Lua脚本，使用<code>/execute</code>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span><span class="params">(splash)</span></span></div><div class="line">    splash:init_cookies(splash.args.cookies)</div><div class="line"></div><div class="line">    <span class="comment">-- ... your script</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        cookies = splash:get_cookies(),</div><div class="line">        <span class="comment">-- ... other results, e.g. html</span></div><div class="line">    &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p>而标准的scrapy session参数可以使用<code>SplashRequest</code>将cookie添加到当前Splash cookiejar中</p>
<h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a><a href="">使用实例</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy教程12-抓取动态网站&quot;&gt;&lt;a href=&quot;#Scrapy教程12-抓取动态网站&quot; class=&quot;headerlink&quot; title=&quot;Scrapy教程12- 抓取动态网站&quot;&gt;&lt;/a&gt;Scrapy教程12- 抓取动态网站&lt;/h1&gt;&lt;p&gt;前面我们介绍的都
    
    </summary>
    
    
      <category term="scrapy,js" scheme="https://www.xncoding.com/tags/scrapy-js/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup</title>
    <link href="https://www.xncoding.com/2018/03/30/python/BeautifulSoup.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/BeautifulSoup.html</id>
    <published>2018-03-30T07:32:03.142Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><h2 id="bs"><a href="#bs" class="headerlink" title="bs"></a>bs</h2><pre><code>from bs4 import BeautifulSoup
bs = BeautifulSoup(content, &apos;lxml&apos;)
[&apos;class&apos;]  # list
[&apos;id&apos;]  # str
[&apos;href&apos;]
.name .head .body
.attrs  # 字典
.text  # 文档
.contents  # 子list
.children  # 生成器
.descendants  # 所以子孙节点
</code></pre><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><pre><code>使用 .next_sibling 和 .previous_sibling 属性来查询兄弟节点
通过 .next_siblings 和 .previous_siblings 全部兄弟节点
前进后退
next_element 和 .previous_element
通过 .next_elements 和 .previous_elements 所有前后节点
</code></pre><h2 id="text"><a href="#text" class="headerlink" title="text"></a>text</h2><pre><code>.string
.strings和.stripped_strings
[text for text in soup.stripped_strings]
.get_text(&apos;|&apos;, strip=True)
</code></pre><h2 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h2><pre><code>find_all(name, attrs, recursive, text, **kwargs)  # recursive=False只搜索子节点

def has_class_but_no_id(tag):
    return tag.has_attr(&apos;class&apos;) and not tag.has_attr(&apos;id&apos;)
soup.find_all(has_class_but_no_id)
soup.find_all(href=re.compile(&quot;elsie&quot;), id=&apos;link1&apos;)
soup.find_all(attrs={&quot;data-foo&quot;: &quot;value&quot;}  # data-* 属性
soup.find_all(text=[&quot;Tillie&quot;, &quot;Elsie&quot;, &quot;Lacie&quot;])
soup.find_all(id=&apos;link2&apos;)

soup.find_all(&quot;a&quot;, limit=2)
soup.find_all(&apos;a&apos;) - -soup(a)
</code></pre><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>find(name, attrs, recursive, text, **kwargs)</p>
<pre><code>1 find(tagname)        # 直接搜索名为tagname的tag 如：find(&apos;head&apos;)
2 find(list)           # 搜索在list中的tag，如: find([&apos;head&apos;, &apos;body&apos;])
3 find(dict)           # 搜索在dict中的tag，如:find({&apos;head&apos;:True, })
4 find(re.compile(&apos;&apos;)) # 搜索符合正则的tag, 如:find(re.compile(&apos;^p&apos;))
</code></pre><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><pre><code>标签名不加任何修饰，类名前加点，id名前加
soup.select(&apos;title&apos;)
soup.select(&apos;.sister&apos;)
soup.select(&apos;#link1&apos;)
soup.select(&quot;head &gt; title&quot;)  # 直接子标签查找
不在同一节点的空格隔开，同一节点的不加空格
soup.select(&apos;p a[href=&quot;http://example.com/elsie&quot;]&apos;)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;BeautifulSoup&quot;&gt;&lt;a href=&quot;#BeautifulSoup&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup&quot;&gt;&lt;/a&gt;BeautifulSoup&lt;/h1&gt;&lt;h2 id=&quot;bs&quot;&gt;&lt;a href=&quot;#bs&quot; cla
    
    </summary>
    
    
      <category term="BeautifulSoup，解析" scheme="https://www.xncoding.com/tags/BeautifulSoup%EF%BC%8C%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>爬虫,aiohttp</title>
    <link href="https://www.xncoding.com/2018/03/30/python/%E7%88%AC%E8%99%AB,aiohttp.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/爬虫,aiohttp.html</id>
    <published>2018-03-30T07:32:03.137Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫-aiohttp"><a href="#爬虫-aiohttp" class="headerlink" title="爬虫,aiohttp"></a>爬虫,aiohttp</h1><pre><code>import asyncio
import aiohttp


# 简单实例
async def aiohttp_test01(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            print(resp.status)
            print(await resp.text())

loop = asyncio.get_event_loop()
tasks = [aiohttp_test01(&quot;https://api.github.com/events&quot;)]
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
#aiohttp.request(&apos;GET&apos;,url)
# 其他Http方法
# session.post(&apos;http://httpbin.org/post&apos;, data=b&apos;data&apos;)
# session.put(&apos;http://httpbin.org/put&apos;, data=b&apos;data&apos;)
# session.delete(&apos;http://httpbin.org/delete&apos;)
# session.head(&apos;http://httpbin.org/get&apos;)
# session.options(&apos;http://httpbin.org/get&apos;)
# session.patch(&apos;http://httpbin.org/patch&apos;, data=b&apos;data&apos;)

# 自定义Headers
# payload = {&apos;some&apos;: &apos;data&apos;}
# headers = {&apos;content-type&apos;: &apos;application/json&apos;}
# await session.post(url, data=json.dumps(payload), headers=headers)

# 自定义Cookie
# cookies = {&apos;cookies_are&apos;: &apos;working&apos;}
# async with ClientSession(cookies=cookies) as session:
# 访问Cookie: session.cookie_jar

# 在URLs中传递参数
# 1. params = {&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;}
# 2. params = [(&apos;key&apos;, &apos;value1&apos;), (&apos;key&apos;, &apos;value2&apos;)]
# async with session.get(&apos;http://httpbin.org/get&apos;, params=params) as resp:
#     assert resp.url == &apos;http://httpbin.org/get?key2=value2&amp;key1=value1&apos;

# 发送数据
# payload = {&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;}
# async with session.post(&apos;http://httpbin.org/post&apos;, data=payload) as resp:
# async with session.post(url, data=json.dumps(payload)) as resp:
#     print(await resp.text())

# 发送文件(1)
# files = {&apos;file&apos;: open(&apos;report.xls&apos;, &apos;rb&apos;)}
# await session.post(url, data=files)

# 发送数据(2)
# data = FormData()
# data.add_field(&apos;file&apos;,
#                open(&apos;report.xls&apos;, &apos;rb&apos;),
#                filename=&apos;report.xls&apos;,
#                content_type=&apos;application/vnd.ms-excel&apos;)
# await session.post(url, data=data)

# 超时设置
# aync with session.get(&apos;https://github.com&apos;, timeout=60) as r:

# 代理支持
# async with aiohttp.ClientSession() as session:
#     async with session.get(&quot;http://python.org&quot;, proxy=&quot;http://some.proxy.com&quot;) as resp:
#         print(resp.status)

# async with aiohttp.ClientSession() as session:
#     proxy_auth = aiohttp.BasicAuth(&apos;user&apos;, &apos;pass&apos;)
#     async with session.get(&quot;http://python.org&quot;, proxy=&quot;http://some.proxy.com&quot;, proxy_auth=proxy_auth) as resp:
#         print(resp.status)
# session.get(&quot;http://python.org&quot;, proxy=&quot;http://user:pass@some.proxy.com&quot;)

# 返回的内容
# async with session.get(&apos;https://api.github.com/events&apos;) as resp:
#     print(await resp.text())
#     print(await resp.text(encoding=&apos;gbk&apos;))
#     print(await resp.read())
#     print(await resp.json())

# 返回内容较大
# with open(filename, &apos;wb&apos;) as fd:
#     while True:
#         chunk = await resp.content.read(chunk_size)
#         if not chunk:
#             break
#         fd.write(chunk)

# 返回的其他变量
# async with session.get(&apos;http://httpbin.org/get&apos;) as resp:
#     print(resp.status)        # 状态码
#     print(resp.headers)       # Headers
#     print(resp.raw_headers)   # 原始Headers
#     print(resp.cookies)       # 返回的Cookie

# 访问历史History
# resp = await session.get(&apos;http://example.com/some/redirect/&apos;)
# resp: &lt;ClientResponse(http://example.com/some/other/url/) [200]&gt;
# resp.history: (&lt;ClientResponse(http://example.com/some/redirect/) [301]&gt;,)

# 释放返回的Response
# 1. async with session.get(url) as resp: pass
# 2. await resp.release()

# 连接器: Connectors
# conn = aiohttp.TCPConnector()
# session = aiohttp.ClientSession(connector=conn)

# 限制连接池大小:
# conn = aiohttp.TCPConnector(limit=30)
# conn = aiohttp.TCPConnector(limit=None)

async def aiohttp_test01(url,cookies=None,headers=None,proxy=None):
    conn = aiohttp.TCPConnector(limit=30)
    #cookies = {&apos;cookies_are&apos;: &apos;working&apos;}
    async with aiohttp.ClientSession(connector=conn,cookies=cookies) as session:
        #payload = {&apos;some&apos;: &apos;data&apos;}
        #headers = {&apos;content-type&apos;: &apos;application/json&apos;}
        #proxy=&quot;http://some.proxy.com&quot;
        async with session.get(url,timeout=10,headers=headers,proxy=proxy) as resp:
            print(resp.status)
            #await parser(resp)
            #print(await resp.text(encoding=&apos;gbk&apos;))
            #print(await resp.read())
            #print(await resp.json())
            await resp.release()

loop = asyncio.get_event_loop()
tasks = [aiohttp_test01(url) for url in urls]
loop.run_until_complete(asyncio.wait(tasks))
loop.close()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;爬虫-aiohttp&quot;&gt;&lt;a href=&quot;#爬虫-aiohttp&quot; class=&quot;headerlink&quot; title=&quot;爬虫,aiohttp&quot;&gt;&lt;/a&gt;爬虫,aiohttp&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;import asyncio
import aiohttp

    
    </summary>
    
    
      <category term="爬虫,aiohttp" scheme="https://www.xncoding.com/tags/%E7%88%AC%E8%99%AB-aiohttp/"/>
    
  </entry>
  
  <entry>
    <title>安装scrapy</title>
    <link href="https://www.xncoding.com/2018/03/30/python/%E5%AE%89%E8%A3%85scrapy.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/安装scrapy.html</id>
    <published>2018-03-30T07:32:03.136Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><p>环境是linux</p>
<p>先安装一些依赖软件
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install python-devel</div><div class="line">yum install libffi-devel</div><div class="line">yum install openssl-devel</div></pre></td></tr></table></figure></p>
<p>然后安装pyopenssl库
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyopenssl</div></pre></td></tr></table></figure></p>
<p>安装xlml
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum install python-lxml</div><div class="line">yum install libxml2-devel</div><div class="line">yum install libxslt-devel</div></pre></td></tr></table></figure></p>
<p>安装service-identity
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install service-identity</div></pre></td></tr></table></figure></p>
<p>安装twisted
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install scrapy</div></pre></td></tr></table></figure></p>
<p>安装scrapy
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install scrapy -U</div></pre></td></tr></table></figure></p>
<p>环境 window
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pip install (pywin32_downloaded_from_ldf).whl</div><div class="line">pip install (twisted_downloaded_from_lfd).whl</div><div class="line">pip install twisted-win</div><div class="line">python C:\Python35\Scripts\pywin32_postinstall.py -install</div><div class="line">pip install scrapy</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装scrapy&quot;&gt;&lt;a href=&quot;#安装scrapy&quot; class=&quot;headerlink&quot; title=&quot;安装scrapy&quot;&gt;&lt;/a&gt;安装scrapy&lt;/h2&gt;&lt;p&gt;环境是linux&lt;/p&gt;
&lt;p&gt;先安装一些依赖软件
&lt;figure class=&quot;highl
    
    </summary>
    
    
      <category term="安装，scrapy" scheme="https://www.xncoding.com/tags/%E5%AE%89%E8%A3%85%EF%BC%8Cscrapy/"/>
    
  </entry>
  
  <entry>
    <title>python 反爬虫策略</title>
    <link href="https://www.xncoding.com/2018/03/30/python/python%20%E5%8F%8D%E7%88%AC%E8%99%AB%E7%AD%96%E7%95%A5.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/python 反爬虫策略.html</id>
    <published>2018-03-30T07:32:03.136Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>python 反爬虫策略</p>
<ol>
<li>.限制IP地址单位时间的访问次数 ：
分析：没有哪个常人一秒钟内能访问相同网站5次，除非是程序访问，而有这种喜好的，就剩下搜索引擎爬虫和讨厌的采集器了。
弊端：一刀切，这同样会阻止搜索引擎对网站的收录
适用网站：不太依靠搜索引擎的网站
采集器会怎么做：减少单位时间的访问次数，减低采集效率</li>
<li>屏蔽ip
分析：通过后台计数器，记录来访者ip和访问频率，人为分析来访记录，屏蔽可疑Ip。
弊端：似乎没什么弊端，就是站长忙了点
适用网站：所有网站，且站长能够知道哪些是google或者百度的机器人
采集器会怎么做：打游击战呗！利用ip代理采集一次换一次，不过会降低采集器的效率和网速(用代理嘛)。</li>
<li>利用js加密网页内容
Note:这个方法我没接触过，只是从别处看来
分析：不用分析了，搜索引擎爬虫和采集器通杀
适用网站：极度讨厌搜索引擎和采集器的网站
采集器会这么做：你那么牛，都豁出去了，他就不来采你了</li>
<li>网页里隐藏网站版权或者一些随机垃圾文字，这些文字风格写在css文件中
分析：虽然不能防止采集，但是会让采集后的内容充满了你网站的版权说明或者一些垃圾文字，因为一般采集器不会同时采集你的css文件，那些文字没了风格，就显示出来了。
适用网站：所有网站
采集器会怎么做：对于版权文字，好办，替换掉。对于随机的垃圾文字，没办法，勤快点了。</li>
<li>用户登录才能访问网站内容 
分析：搜索引擎爬虫不会对每个这样类型的网站设计登录程序。听说采集器可以针对某个网站设计模拟用户登录提交表单行为。
适用网站：极度讨厌搜索引擎，且想阻止大部分采集器的网站
采集器会怎么做：制作拟用户登录提交表单行为的模块</li>
<li>利用脚本语言做分页(隐藏分页)
分析：还是那句，搜索引擎爬虫不会针对各种网站的隐藏分页进行分析，这影响搜索引擎对其收录。但是，采集者在编写采集规则时，要分析目标网页代码，懂点脚本知识的人，就会知道分页的真实链接地址。
适用网站：对搜索引擎依赖度不高的网站，还有，采集你的人不懂脚本知识
采集器会怎么做：应该说采集者会怎么做，他反正都要分析你的网页代码，顺便分析你的分页脚本，花不了多少额外时间。</li>
<li>防盗链措施 (只允许通过本站页面连接查看，如：Request.ServerVariables(“HTTP_REFERER“) )
分析：asp和php可以通过读取请求的HTTP_REFERER属性，来判断该请求是否来自本网站，从而来限制采集器，同样也限制了搜索引擎爬虫，严重影响搜索引擎对网站部分防盗链内容的收录。
适用网站：不太考虑搜索引擎收录的网站
采集器会怎么做：伪装HTTP_REFERER嘛，不难。</li>
<li>全flash、图片或者pdf来呈现网站内容
分析：对搜索引擎爬虫和采集器支持性不好，这个很多懂点seo的人都知道
适用网站：媒体设计类并且不在意搜索引擎收录的网站
采集器会怎么做：不采了，走人</li>
<li>网站随机采用不同模版
分析：因为采集器是根据网页结构来定位所需要的内容，一旦先后两次模版更换，采集规则就失效，不错。而且这样对搜索引擎爬虫没影响。
适用网站：动态网站，并且不考虑用户体验。
采集器会怎么做：一个网站模版不可能多于10个吧，每个模版弄一个规则就行了，不同模版采用不同采集规则。如果多于10个模版了，既然目标网站都那么费劲的更换模版，成全他，撤。</li>
<li>采用动态不规则的html标签
分析：这个比较变态。考虑到html标签内含空格和不含空格效果是一样的，所以&lt; div &gt;和&lt; div &gt;对于页面显示效果一样，但是作为采集器的标记就是两个不同标记了。如果每次页面的html标签内空格数随机，那么
采集规则就失效了。但是，这对搜索引擎爬虫没多大影响。
适合网站：所有动态且不想遵守网页设计规范的网站。
采集器会怎么做：还是有对策的，现在html cleaner还是很多的，先清理了html标签，然后再写采集规则；应该用采集规则前先清理html标签，还是能够拿到所需数据</li>
</ol>
<p>总结：</p>
<ol>
<li>ip，账号频率，自动限速 得到延迟delay con 线程数</li>
<li>设置 referer user - agent</li>
<li>js selenium splash 分析一些参数</li>
<li>登录 cookie</li>
<li>验证码，包括图像验证码、拖动验证码等等<h1 id="爬虫技能书"><a href="#爬虫技能书" class="headerlink" title="爬虫技能书"></a>爬虫技能书</h1><img src="./images/%E7%88%AC%E8%99%AB%E6%8A%80%E8%83%BD%E6%A0%91_1.png" alt="enter description here" title="爬虫技能树"></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 反爬虫策略&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;.限制IP地址单位时间的访问次数 ：
分析：没有哪个常人一秒钟内能访问相同网站5次，除非是程序访问，而有这种喜好的，就剩下搜索引擎爬虫和讨厌的采集器了。
弊端：一刀切，这同样会阻止搜索引擎对网站的收录
适用网站：不太依靠搜
    
    </summary>
    
    
      <category term="python,爬虫" scheme="https://www.xncoding.com/tags/python-%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy item</title>
    <link href="https://www.xncoding.com/2018/03/30/python/scrapy%20item.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/scrapy item.html</id>
    <published>2018-03-30T07:32:03.135Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Item</p>
<p>Item是保存结构数据的地方，Scrapy可以将解析结果以字典形式返回，但是Python中字典缺少结构，在大型爬虫系统中很不方便。</p>
<p>Item提供了类字典的API，并且可以很方便的声明字段，很多Scrapy组件可以利用Item的其他信息。</p>
<h2 id="定义Item"><a href="#定义Item" class="headerlink" title="定义Item"></a>定义Item</h2><p>定义Item非常简单，只需要继承<code>scrapy.Item</code>类，并将所有字段都定义为<code>scrapy.Field</code>类型即可
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field()</div><div class="line">    price = scrapy.Field()</div><div class="line">    stock = scrapy.Field()</div><div class="line">    last_updated = scrapy.Field(serializer=str)</div></pre></td></tr></table></figure></p>
<h2 id="Item-Fields"><a href="#Item-Fields" class="headerlink" title="Item Fields"></a>Item Fields</h2><p><code>Field</code>对象可用来对每个字段指定元数据。例如上面<code>last_updated</code>的序列化函数指定为<code>str</code>，可任意指定元数据，不过每种元数据对于不同的组件意义不一样。</p>
<h2 id="Item-Loader"><a href="#Item-Loader" class="headerlink" title="Item Loader"></a>Item Loader</h2><p>Item Loader为我们提供了生成Item的相当便利的方法。Item为抓取的数据提供了容器，而Item Loader可以让我们非常方便的将输入填充到容器中。</p>
<p>下面我们通过一个例子来展示一般使用方法：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> myproject.items <span class="keyword">import</span> Product</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">    l = ItemLoader(item=Product(), response=response)</div><div class="line">    l.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_name"]'</span>)</div><div class="line">    l.add_xpath(<span class="string">'name'</span>, <span class="string">'//div[@class="product_title"]'</span>)</div><div class="line">    l.add_xpath(<span class="string">'price'</span>, <span class="string">'//p[@id="price"]'</span>)</div><div class="line">    l.add_css(<span class="string">'stock'</span>, <span class="string">'p#stock]'</span>)</div><div class="line">    l.add_value(<span class="string">'last_updated'</span>, <span class="string">'today'</span>) <span class="comment"># you can also use literal values</span></div><div class="line">    <span class="keyword">return</span> l.load_item()</div></pre></td></tr></table></figure></p>
<p>注意上面的<code>name</code>字段是从两个xpath路径添累加后得到。</p>
<h2 id="输入-输出处理器"><a href="#输入-输出处理器" class="headerlink" title="输入/输出处理器"></a>输入/输出处理器</h2><p>每个Item Loader对每个<code>Field</code>都有一个输入处理器和一个输出处理器。输入处理器在数据被接受到时执行，当数据收集完后调用<code>ItemLoader.load_item()</code>时再执行输出处理器，返回最终结果。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">l = ItemLoader(Product(), some_selector)</div><div class="line">l.add_xpath(<span class="string">'name'</span>, xpath1) <span class="comment"># (1)</span></div><div class="line">l.add_xpath(<span class="string">'name'</span>, xpath2) <span class="comment"># (2)</span></div><div class="line">l.add_css(<span class="string">'name'</span>, css) <span class="comment"># (3)</span></div><div class="line">l.add_value(<span class="string">'name'</span>, <span class="string">'test'</span>) <span class="comment"># (4)</span></div><div class="line"><span class="keyword">return</span> l.load_item() <span class="comment"># (5)</span></div></pre></td></tr></table></figure></p>
<p>执行流程是这样的：</p>
<ol>
<li><code>xpath1</code>中的数据被提取出来，然后传输到<code>name</code>字段的输入处理器中，在输入处理器处理完后生成结果放在Item Loader里面(这时候没有赋值给item)</li>
<li><code>xpath2</code>数据被提取出来，然后传输给(1)中同样的输入处理器，因为它们都是<code>name</code>字段的处理器，然后处理结果被附加到(1)的结果后面</li>
<li>跟2一样</li>
<li>跟3一样，不过这次是直接的字面字符串值，先转换成一个单元素的可迭代对象再传给输入处理器</li>
<li>上面4步的数据被传输给<code>name</code>的输出处理器，将最终的结果赋值给<code>name</code>字段</li>
</ol>
<h2 id="自定义Item-Loader"><a href="#自定义Item-Loader" class="headerlink" title="自定义Item Loader"></a>自定义Item Loader</h2><p>使用类定义语法，下面是一个例子
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.loader <span class="keyword">import</span> ItemLoader</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> TakeFirst, MapCompose, Join</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line"></div><div class="line">    default_output_processor = TakeFirst()</div><div class="line"></div><div class="line">    name_in = MapCompose(unicode.title)</div><div class="line">    name_out = Join()</div><div class="line"></div><div class="line">    price_in = MapCompose(unicode.strip)</div><div class="line"></div><div class="line">    <span class="comment"># ...</span></div></pre></td></tr></table></figure></p>
<p>通过<code>_in</code>和<code>_out</code>后缀来定义输入和输出处理器，并且还可以定义默认的<code>ItemLoader.default_input_processor</code>和<code>ItemLoader.default_input_processor</code>.</p>
<h2 id="在Field定义中声明输入-输出处理器"><a href="#在Field定义中声明输入-输出处理器" class="headerlink" title="在Field定义中声明输入/输出处理器"></a>在Field定义中声明输入/输出处理器</h2><p>还有个地方可以非常方便的添加输入/输出处理器，那就是直接在Field定义中
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.loader.processors <span class="keyword">import</span> Join, MapCompose, TakeFirst</div><div class="line"><span class="keyword">from</span> w3lib.html <span class="keyword">import</span> remove_tags</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_price</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">if</span> value.isdigit():</div><div class="line">        <span class="keyword">return</span> value</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    name = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags),</div><div class="line">        output_processor=Join(),</div><div class="line">    )</div><div class="line">    price = scrapy.Field(</div><div class="line">        input_processor=MapCompose(remove_tags, filter_price),</div><div class="line">        output_processor=TakeFirst(),</div><div class="line">    )</div></pre></td></tr></table></figure></p>
<p>优先级：</p>
<ol>
<li>在Item Loader中定义的<code>field_in</code>和<code>field_out</code></li>
<li>Filed元数据(<code>input_processor</code>和<code>output_processor</code>关键字)</li>
<li>Item Loader中的默认的</li>
</ol>
<p>Tips：一般来讲，将输入处理器定义在Item Loader的定义中<code>field_in</code>，然后将输出处理器定义在Field元数据中</p>
<h2 id="Item-Loader上下文"><a href="#Item-Loader上下文" class="headerlink" title="Item Loader上下文"></a>Item Loader上下文</h2><p>Item Loader上下文被所有输入/输出处理器共享，比如你有一个解析长度的函数
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_length</span><span class="params">(text, loader_context)</span>:</span></div><div class="line">    unit = loader_context.get(<span class="string">'unit'</span>, <span class="string">'m'</span>)</div><div class="line">    <span class="comment"># ... length parsing code goes here ...</span></div><div class="line">    <span class="keyword">return</span> parsed_length</div></pre></td></tr></table></figure></p>
<p>初始化和修改上下文的值
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">loader = ItemLoader(product)</div><div class="line">loader.context[<span class="string">'unit'</span>] = <span class="string">'cm'</span></div><div class="line"></div><div class="line">loader = ItemLoader(product, unit=<span class="string">'cm'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductLoader</span><span class="params">(ItemLoader)</span>:</span></div><div class="line">    length_out = MapCompose(parse_length, unit=<span class="string">'cm'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="内置的处理器"><a href="#内置的处理器" class="headerlink" title="内置的处理器"></a>内置的处理器</h2><ol>
<li><code>Identity</code> 啥也不做</li>
<li><code>TakeFirst</code> 返回第一个非空值，通常用作输出处理器</li>
<li><code>Join</code> 将结果连起来，默认使用空格’ ‘</li>
<li><code>Compose</code> 将函数链接起来形成管道流，产生最后的输出</li>
<li><code>MapCompose</code> 跟上面的<code>Compose</code>类似，区别在于内部结果在函数中的传递方式.
它的输入值是可迭代的，首先将第一个函数依次作用于所有值，产生新的可迭代输入，作为第二个函数的输入，最后生成的结果连起来返回最终值，一般用在输入处理器中。</li>
<li><code>SelectJmes</code> 使用json路径来查询值并返回结果</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Item&lt;/p&gt;
&lt;p&gt;Item是保存结构数据的地方，Scrapy可以将解析结果以字典形式返回，但是Python中字典缺少结构，在大型爬虫系统中很不方便。&lt;/p&gt;
&lt;p&gt;Item提供了类字典的API，并且可以很方便的声明字段，很多Scrapy组件可以利用Item的其他信息
    
    </summary>
    
    
      <category term="scrapy,item" scheme="https://www.xncoding.com/tags/scrapy-item/"/>
    
  </entry>
  
  <entry>
    <title>Item Pipeline</title>
    <link href="https://www.xncoding.com/2018/03/30/python/Item%20Pipeline.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/Item Pipeline.html</id>
    <published>2018-03-30T07:32:03.135Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy教程06-Item-Pipeline"><a href="#Scrapy教程06-Item-Pipeline" class="headerlink" title="Scrapy教程06- Item Pipeline"></a>Scrapy教程06- Item Pipeline</h1><p>当一个item被蜘蛛爬取到之后会被发送给Item Pipeline，然后多个组件按照顺序处理这个item。
每个Item Pipeline组件其实就是一个实现了一个简单方法的Python类。他们接受一个item并在上面执行逻辑，还能决定这个item到底是否还要继续往下传输，如果不要了就直接丢弃。</p>
<p>使用Item Pipeline的常用场景：</p>
<ul>
<li>清理HTML数据</li>
<li>验证被抓取的数据(检查item是否包含某些字段)</li>
<li>重复性检查(然后丢弃)</li>
<li>将抓取的数据存储到数据库中</li>
</ul>
<h2 id="编写自己的Pipeline"><a href="#编写自己的Pipeline" class="headerlink" title="编写自己的Pipeline"></a>编写自己的Pipeline</h2><p>定义一个Python类，然后实现方法<code>process_item(self, item, spider)</code>即可，返回一个字典或Item，或者抛出<code>DropItem</code>异常丢弃这个Item。</p>
<p>或者还可以实现下面几个方法：</p>
<ul>
<li><code>open_spider(self, spider)</code> 蜘蛛打开的时执行</li>
<li><code>close_spider(self, spider)</code> 蜘蛛关闭时执行</li>
<li><code>from_crawler(cls, crawler)</code> 可访问核心组件比如配置和信号，并注册钩子函数到Scrapy中</li>
</ul>
<h2 id="Item-Pipeline示例"><a href="#Item-Pipeline示例" class="headerlink" title="Item Pipeline示例"></a>Item Pipeline示例</h2><h3 id="价格验证"><a href="#价格验证" class="headerlink" title="价格验证"></a>价格验证</h3><p>我们通过一个价格验证例子来看看怎样使用
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PricePipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    vat_factor = <span class="number">1.15</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item[<span class="string">'price'</span>]:</div><div class="line">            <span class="keyword">if</span> item[<span class="string">'price_excludes_vat'</span>]:</div><div class="line">                item[<span class="string">'price'</span>] = item[<span class="string">'price'</span>] * self.vat_factor</div><div class="line">            <span class="keyword">return</span> item</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Missing price in %s"</span> % item)</div></pre></td></tr></table></figure></p>
<h3 id="将item写入json文件"><a href="#将item写入json文件" class="headerlink" title="将item写入json文件"></a>将item写入json文件</h3><p>下面的这个Pipeline将所有的item写入到一个单独的json文件，一行一个item
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonWriterPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.file = open(<span class="string">'items.jl'</span>, <span class="string">'wb'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        line = json.dumps(dict(item)) + <span class="string">"\n"</span></div><div class="line">        self.file.write(line)</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure></p>
<h3 id="将item存储到MongoDB中"><a href="#将item存储到MongoDB中" class="headerlink" title="将item存储到MongoDB中"></a>将item存储到MongoDB中</h3><p>这个例子使用<a href="http://api.mongodb.org/python/current/" target="_blank" rel="external">pymongo</a>来演示怎样讲item保存到MongoDB中。
MongoDB的地址和数据库名在配置中指定，这个例子主要是向你展示怎样使用<code>from_crawler()</code>方法，以及如何清理资源。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    collection_name = <span class="string">'scrapy_items'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></div><div class="line">        self.mongo_uri = mongo_uri</div><div class="line">        self.mongo_db = mongo_db</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls(</div><div class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</div><div class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DATABASE'</span>, <span class="string">'items'</span>)</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</div><div class="line">        self.db = self.client[self.mongo_db]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        self.db[self.collection_name].insert(dict(item))</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure></p>
<h3 id="重复过滤器"><a href="#重复过滤器" class="headerlink" title="重复过滤器"></a>重复过滤器</h3><p>假设我们的item里面的id字典是唯一的，但是我们的蜘蛛返回了多个相同id的item
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuplicatesPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.ids_seen = set()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> item[<span class="string">'id'</span>] <span class="keyword">in</span> self.ids_seen:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Duplicate item found: %s"</span> % item)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            self.ids_seen.add(item[<span class="string">'id'</span>])</div><div class="line">            <span class="keyword">return</span> item</div></pre></td></tr></table></figure></p>
<h2 id="激活一个Item-Pipeline组件"><a href="#激活一个Item-Pipeline组件" class="headerlink" title="激活一个Item Pipeline组件"></a>激活一个Item Pipeline组件</h2><p>你必须在配置文件中将你需要激活的Pipline组件添加到<code>ITEM_PIPELINES</code>中
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="string">'myproject.pipelines.PricePipeline'</span>: <span class="number">300</span>,</div><div class="line">    <span class="string">'myproject.pipelines.JsonWriterPipeline'</span>: <span class="number">800</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后面的数字表示它的执行顺序，从低到高执行，范围0-1000</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy教程06-Item-Pipeline&quot;&gt;&lt;a href=&quot;#Scrapy教程06-Item-Pipeline&quot; class=&quot;headerlink&quot; title=&quot;Scrapy教程06- Item Pipeline&quot;&gt;&lt;/a&gt;Scrapy教程06- I
    
    </summary>
    
    
      <category term="scrapy,Pipeline" scheme="https://www.xncoding.com/tags/scrapy-Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>动态配置爬虫</title>
    <link href="https://www.xncoding.com/2018/03/30/python/%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE%E7%88%AC%E8%99%AB.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/动态配置爬虫.html</id>
    <published>2018-03-30T07:32:03.134Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scrapy教程10-动态配置爬虫"><a href="#Scrapy教程10-动态配置爬虫" class="headerlink" title="Scrapy教程10- 动态配置爬虫"></a>Scrapy教程10- 动态配置爬虫</h1><p>有很多时候我们需要从多个网站爬取所需要的数据，比如我们想爬取多个网站的新闻，将其存储到数据库同一个表中。我们是不是要对每个网站都得去定义一个Spider类呢？
其实不需要，我们可以通过维护一个规则配置表或者一个规则配置文件来动态增加或修改爬取规则，然后程序代码不需要更改就能实现多个网站爬取。</p>
<p>要这样做，我们就不能再使用前面的<code>scrapy crawl test</code>这种命令了，我们需要使用编程的方式运行Scrapy spider，参考<a href="http://doc.scrapy.org/en/1.0/topics/practices.html#run-scrapy-from-a-script" target="_blank" rel="external">官方文档</a></p>
<h3 id="脚本运行Scrapy"><a href="#脚本运行Scrapy" class="headerlink" title="脚本运行Scrapy"></a>脚本运行Scrapy</h3><p>可以利用scrapy提供的<a href="http://doc.scrapy.org/en/1.0/topics/api.html#topics-api" target="_blank" rel="external">核心API</a>通过编程方式启动scrapy，代替传统的<code>scrapy crawl</code>启动方式。</p>
<p>Scrapy构建于Twisted异步网络框架基础之上，因此你需要在Twisted reactor里面运行。</p>
<p>首先你可以使用<code>scrapy.crawler.CrawlerProcess</code>这个类来运行你的spider，这个类会为你启动一个Twisted reactor，并能配置你的日志和shutdown处理器。所有的scrapy命令都使用这个类。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</div><div class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</div><div class="line"></div><div class="line">process = CrawlerProcess(get_project_settings())</div><div class="line"></div><div class="line">process.crawl(MySpider)</div><div class="line">process.start() <span class="comment"># the script will block here until the crawling is finished</span></div></pre></td></tr></table></figure></p>
<p>然后你就可以直接执行这个脚本
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python run.py</div></pre></td></tr></table></figure></p>
<p>另外一个功能更强大的类是<code>scrapy.crawler.CrawlerRunner</code>，推荐你使用这个
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</div><div class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    <span class="comment"># Your spider definition</span></div><div class="line">    ...</div><div class="line"></div><div class="line">configure_logging(&#123;<span class="string">'LOG_FORMAT'</span>: <span class="string">'%(levelname)s: %(message)s'</span>&#125;)</div><div class="line">runner = CrawlerRunner()</div><div class="line"></div><div class="line">d = runner.crawl(MySpider)</div><div class="line">d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</div><div class="line">reactor.run() <span class="comment"># the script will block here until the crawling is finished</span></div></pre></td></tr></table></figure></p>
<h3 id="同一进程运行多个spider"><a href="#同一进程运行多个spider" class="headerlink" title="同一进程运行多个spider"></a>同一进程运行多个spider</h3><p>默认情况当你每次执行<code>scrapy crawl</code>命令时会创建一个新的进程。但我们可以使用核心API在同一个进程中同时运行多个spider
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</div><div class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider1</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    <span class="comment"># Your first spider definition</span></div><div class="line">    ...</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider2</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    <span class="comment"># Your second spider definition</span></div><div class="line">    ...</div><div class="line"></div><div class="line">configure_logging()</div><div class="line">runner = CrawlerRunner()</div><div class="line">runner.crawl(MySpider1)</div><div class="line">runner.crawl(MySpider2)</div><div class="line">d = runner.join()</div><div class="line">d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</div><div class="line"></div><div class="line">reactor.run() <span class="comment"># the script will block here until all crawling jobs are finished</span></div></pre></td></tr></table></figure></p>
<h3 id="定义规则表"><a href="#定义规则表" class="headerlink" title="定义规则表"></a>定义规则表</h3><p>好了言归正传，有了前面的脚本启动基础，就可以开始我们的动态配置爬虫了。
我们的需求是这样的，从两个不同的网站爬取我们所需要的新闻文章，然后存储到article表中。</p>
<p>首先我们需要定义规则表和文章表，通过动态的创建蜘蛛类，我们以后就只需要维护规则表即可了。这里我使用SQLAlchemy框架来映射数据库。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">Topic: 定义数据库模型实体</div><div class="line">Desc :</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"><span class="keyword">from</span> sqlalchemy.engine.url <span class="keyword">import</span> URL</div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, Text, DateTime</div><div class="line"><span class="keyword">from</span> coolscrapy.settings <span class="keyword">import</span> DATABASE</div><div class="line"></div><div class="line">Base = declarative_base()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleRule</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""自定义文章爬取规则"""</span></div><div class="line">    __tablename__ = <span class="string">'article_rule'</span></div><div class="line"></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    <span class="comment"># 规则名称</span></div><div class="line">    name = Column(String(<span class="number">30</span>))</div><div class="line">    <span class="comment"># 运行的域名列表，逗号隔开</span></div><div class="line">    allow_domains = Column(String(<span class="number">100</span>))</div><div class="line">    <span class="comment"># 开始URL列表，逗号隔开</span></div><div class="line">    start_urls = Column(String(<span class="number">100</span>))</div><div class="line">    <span class="comment"># 下一页的xpath</span></div><div class="line">    next_page = Column(String(<span class="number">100</span>))</div><div class="line">    <span class="comment"># 文章链接正则表达式(子串)</span></div><div class="line">    allow_url = Column(String(<span class="number">200</span>))</div><div class="line">    <span class="comment"># 文章链接提取区域xpath</span></div><div class="line">    extract_from = Column(String(<span class="number">200</span>))</div><div class="line">    <span class="comment"># 文章标题xpath</span></div><div class="line">    title_xpath = Column(String(<span class="number">100</span>))</div><div class="line">    <span class="comment"># 文章内容xpath</span></div><div class="line">    body_xpath = Column(Text)</div><div class="line">    <span class="comment"># 发布时间xpath</span></div><div class="line">    publish_time_xpath = Column(String(<span class="number">30</span>))</div><div class="line">    <span class="comment"># 文章来源</span></div><div class="line">    source_site = Column(String(<span class="number">30</span>))</div><div class="line">    <span class="comment"># 规则是否生效</span></div><div class="line">    enable = Column(Integer)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Base)</span>:</span></div><div class="line">    <span class="string">"""文章类"""</span></div><div class="line">    __tablename__ = <span class="string">'articles'</span></div><div class="line"></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    url = Column(String(<span class="number">100</span>))</div><div class="line">    title = Column(String(<span class="number">100</span>))</div><div class="line">    body = Column(Text)</div><div class="line">    publish_time = Column(String(<span class="number">30</span>))</div><div class="line">    source_site = Column(String(<span class="number">30</span>))</div></pre></td></tr></table></figure></p>
<h3 id="定义文章Item"><a href="#定义文章Item" class="headerlink" title="定义文章Item"></a>定义文章Item</h3><p>这个很简单了，没什么需要说明的
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(scrapy.Item)</span>:</span></div><div class="line">    title = scrapy.Field()</div><div class="line">    url = scrapy.Field()</div><div class="line">    body = scrapy.Field()</div><div class="line">    publish_time = scrapy.Field()</div><div class="line">    source_site = scrapy.Field()</div></pre></td></tr></table></figure></p>
<h3 id="定义ArticleSpider"><a href="#定义ArticleSpider" class="headerlink" title="定义ArticleSpider"></a>定义ArticleSpider</h3><p>接下来我们将定义爬取文章的蜘蛛，这个spider会使用一个Rule实例来初始化，然后根据Rule实例中的xpath规则来获取相应的数据。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> coolscrapy.utils <span class="keyword">import</span> parse_text</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"><span class="keyword">from</span> coolscrapy.items <span class="keyword">import</span> Article</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleSpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">"article"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rule)</span>:</span></div><div class="line">        self.rule = rule</div><div class="line">        self.name = rule.name</div><div class="line">        self.allowed_domains = rule.allow_domains.split(<span class="string">","</span>)</div><div class="line">        self.start_urls = rule.start_urls.split(<span class="string">","</span>)</div><div class="line">        rule_list = []</div><div class="line">        <span class="comment"># 添加`下一页`的规则</span></div><div class="line">        <span class="keyword">if</span> rule.next_page:</div><div class="line">            rule_list.append(Rule(LinkExtractor(restrict_xpaths=rule.next_page)))</div><div class="line">        <span class="comment"># 添加抽取文章链接的规则</span></div><div class="line">        rule_list.append(Rule(LinkExtractor(</div><div class="line">            allow=[rule.allow_url],</div><div class="line">            restrict_xpaths=[rule.extract_from]),</div><div class="line">            callback=<span class="string">'parse_item'</span>))</div><div class="line">        self.rules = tuple(rule_list)</div><div class="line">        super(ArticleSpider, self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.log(<span class="string">'Hi, this is an article page! %s'</span> % response.url)</div><div class="line"></div><div class="line">        article = Article()</div><div class="line">        article[<span class="string">"url"</span>] = response.url</div><div class="line"></div><div class="line">        title = response.xpath(self.rule.title_xpath).extract()</div><div class="line">        article[<span class="string">"title"</span>] = parse_text(title, self.rule.name, <span class="string">'title'</span>)</div><div class="line"></div><div class="line">        body = response.xpath(self.rule.body_xpath).extract()</div><div class="line">        article[<span class="string">"body"</span>] = parse_text(body, self.rule.name, <span class="string">'body'</span>)</div><div class="line"></div><div class="line">        publish_time = response.xpath(self.rule.publish_time_xpath).extract()</div><div class="line">        article[<span class="string">"publish_time"</span>] = parse_text(publish_time, self.rule.name, <span class="string">'publish_time'</span>)</div><div class="line"></div><div class="line">        article[<span class="string">"source_site"</span>] = self.rule.source_site</div><div class="line"></div><div class="line">        <span class="keyword">return</span> article</div></pre></td></tr></table></figure></p>
<p>要注意的是start_urls，rules等都初始化成了对象的属性，都由传入的rule对象初始化，parse_item方法中的抽取规则也都有rule对象提供。</p>
<h3 id="编写pipeline存储到数据库中"><a href="#编写pipeline存储到数据库中" class="headerlink" title="编写pipeline存储到数据库中"></a>编写pipeline存储到数据库中</h3><p>我们还是使用SQLAlchemy来将文章Item数据存储到数据库中
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@contextmanager</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">session_scope</span><span class="params">(Session)</span>:</span></div><div class="line">    <span class="string">"""Provide a transactional scope around a series of operations."""</span></div><div class="line">    session = Session()</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">yield</span> session</div><div class="line">        session.commit()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        session.rollback()</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        session.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleDataBasePipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""保存文章到数据库"""</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        engine = db_connect()</div><div class="line">        create_news_table(engine)</div><div class="line">        self.Session = sessionmaker(bind=engine)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="string">"""This method is called when the spider is opened."""</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        a = Article(url=item[<span class="string">"url"</span>],</div><div class="line">                    title=item[<span class="string">"title"</span>].encode(<span class="string">"utf-8"</span>),</div><div class="line">                    publish_time=item[<span class="string">"publish_time"</span>].encode(<span class="string">"utf-8"</span>),</div><div class="line">                    body=item[<span class="string">"body"</span>].encode(<span class="string">"utf-8"</span>),</div><div class="line">                    source_site=item[<span class="string">"source_site"</span>].encode(<span class="string">"utf-8"</span>))</div><div class="line">        <span class="keyword">with</span> session_scope(self.Session) <span class="keyword">as</span> session:</div><div class="line">            session.add(a)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<h3 id="修改run-py启动脚本"><a href="#修改run-py启动脚本" class="headerlink" title="修改run.py启动脚本"></a>修改run.py启动脚本</h3><p>我们将上面的run.py稍作修改即可定制我们的文章爬虫启动脚本
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> spiders.article_spider <span class="keyword">import</span> ArticleSpider</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerRunner</div><div class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</div><div class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> configure_logging</div><div class="line"><span class="keyword">from</span> coolscrapy.models <span class="keyword">import</span> db_connect</div><div class="line"><span class="keyword">from</span> coolscrapy.models <span class="keyword">import</span> ArticleRule</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    settings = get_project_settings()</div><div class="line">    configure_logging(settings)</div><div class="line">    db = db_connect()</div><div class="line">    Session = sessionmaker(bind=db)</div><div class="line">    session = Session()</div><div class="line">    rules = session.query(ArticleRule).filter(ArticleRule.enable == <span class="number">1</span>).all()</div><div class="line">    session.close()</div><div class="line">    runner = CrawlerRunner(settings)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> rule <span class="keyword">in</span> rules:</div><div class="line">        <span class="comment"># stop reactor when spider closes</span></div><div class="line">        <span class="comment"># runner.signals.connect(spider_closing, signal=signals.spider_closed)</span></div><div class="line">        runner.crawl(ArticleSpider, rule=rule)</div><div class="line"></div><div class="line">    d = runner.join()</div><div class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</div><div class="line"></div><div class="line">    <span class="comment"># blocks process so always keep as the last statement</span></div><div class="line">    reactor.run()</div><div class="line">    logging.info(<span class="string">'all finished.'</span>)</div></pre></td></tr></table></figure></p>
<p>OK，一切搞定。现在我们可以往ArticleRule表中加入成百上千个网站的规则，而不用添加一行代码，就可以对这成百上千个网站进行爬取。
当然你完全可以做一个Web前端来完成维护ArticleRule表的任务。当然ArticleRule规则也可以放在除了数据库的任何地方，比如配置文件。</p>
<p>你可以在<a href="https://github.com/yidao620c/core-scrapy" target="_blank" rel="external">GitHub</a>上看到本文的完整项目源码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Scrapy教程10-动态配置爬虫&quot;&gt;&lt;a href=&quot;#Scrapy教程10-动态配置爬虫&quot; class=&quot;headerlink&quot; title=&quot;Scrapy教程10- 动态配置爬虫&quot;&gt;&lt;/a&gt;Scrapy教程10- 动态配置爬虫&lt;/h1&gt;&lt;p&gt;有很多时候我们需
    
    </summary>
    
    
      <category term="scrapy,多个spider" scheme="https://www.xncoding.com/tags/scrapy-%E5%A4%9A%E4%B8%AAspider/"/>
    
  </entry>
  
  <entry>
    <title>scrapy img</title>
    <link href="https://www.xncoding.com/2018/03/30/python/scrapy%20img.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/scrapy img.html</id>
    <published>2018-03-30T07:32:03.128Z</published>
    <updated>2018-03-29T23:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="img"><a href="#img" class="headerlink" title="img"></a>img</h2><pre><code>将所有下载的图片转换成通用的格式（JPG）和模式（RGB）
避免重新下载最近已经下载过的图片
缩略图生成
检测图像的宽/高，确保它们满足最小限制
</code></pre><h2 id="items"><a href="#items" class="headerlink" title="items"></a>items</h2><pre><code>class MyItem(scrapy.Item):
    image_urls = scrapy.Field()
    images = scrapy.Field()
</code></pre><h2 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h2><pre><code>ITEM_PIPELINES = {&apos;scrapy.contrib.pipeline.images.ImagesPipeline&apos;: 1}
IMAGES_STORE = &apos;/path/to/valid/dir&apos;
#90天的图片失效期限
IMAGES_EXPIRES = 90
#缩略图生成
IMAGES_THUMBS = {
   &apos;small&apos;: (50, 50),
   &apos;big&apos;: (270, 270),
}
#滤出小图片
IMAGES_MIN_HEIGHT = 110
IMAGES_MIN_WIDTH = 110
</code></pre><h2 id="定制图片管道的例子"><a href="#定制图片管道的例子" class="headerlink" title="定制图片管道的例子"></a>定制图片管道的例子</h2><pre><code>import scrapy
from scrapy.contrib.pipeline.images import ImagesPipeline
from scrapy.exceptions import DropItem
class MyImagePipelines(ImagesPipeline):
    def get_media_requests(self, item, info):
            for image_url in item[&apos;image_urls&apos;]:
                # 这里我把item传过去,因为后面需要用item里面的书名和章节作为文件名
                yield scrapy.Request(image_url, meta={&apos;item&apos;: item})
    def item_completed(self, results, item, info):
        image_paths = [x[&apos;path&apos;] for ok, x in results if ok]
        if not image_paths:
            raise DropItem(&quot;Item contains no images&quot;)
        return item
    def file_path(self, request, response=None, info=None):
        item = request.meta[&apos;item&apos;]
        # 从URL提取图片的文件名
        image_guid = request.url.split(&apos;/&apos;)[-1]
        # 拼接最终的文件名,格式:full/{书名}/{章节}/图片文件名.jpg
        filename = u&apos;full/{0[bookname]}/{0[chapter]}/{1}&apos;.format(item, image_guid)
        return filename
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;img&quot;&gt;&lt;a href=&quot;#img&quot; class=&quot;headerlink&quot; title=&quot;img&quot;&gt;&lt;/a&gt;img&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;将所有下载的图片转换成通用的格式（JPG）和模式（RGB）
避免重新下载最近已经下载过的图片
缩略图生成
检测图像的
    
    </summary>
    
    
      <category term="scrapy,img" scheme="https://www.xncoding.com/tags/scrapy-img/"/>
    
  </entry>
  
  <entry>
    <title>xpath,css</title>
    <link href="https://www.xncoding.com/2018/03/30/python/xpath,css.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/xpath,css.html</id>
    <published>2018-03-30T07:27:14.500Z</published>
    <updated>2018-03-29T23:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="文本一"><a href="#文本一" class="headerlink" title="文本一"></a>文本一</h3><pre><code>response.xpath(&apos;//title/text()&apos;).extract()
response.css(&apos;title::text&apos;).extract()
</code></pre><h3 id="文本-包括子节点"><a href="#文本-包括子节点" class="headerlink" title="文本 包括子节点"></a>文本 包括子节点</h3><pre><code>sel.xpath(&quot;//a[1]//text()&quot;).extract()
</code></pre><h3 id="文本-包括子节点-合并"><a href="#文本-包括子节点-合并" class="headerlink" title="文本 包括子节点 合并"></a>文本 包括子节点 合并</h3><pre><code>sel.xpath(&quot;string(//a[1])&quot;).extract()
</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>response.xpath(&apos;//img/@src&apos;).extract()
response.css(&apos;img::attr(src)&apos;).extract()
</code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><pre><code>response.css(&apos;img&apos;).xpath(&apos;@src&apos;).extract()
response.xpath(&apos;//img&apos;).css(&apos;::attr(src)&apos;).extract()
</code></pre><h3 id="精确"><a href="#精确" class="headerlink" title="精确"></a>精确</h3><pre><code>response.xpath(&apos;//div[@id=&quot;images&quot;]/a/text()&apos;).extract()
response.css(&apos;div#images a::text&apos;).extract()
</code></pre><h3 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h3><pre><code>response.xpath(&apos;//div[contains(@id, &quot;image&quot;)]/a/text()&apos;).extract()
response.css(&apos;div[id*=image] a::text&apos;).extract()
</code></pre><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h3><pre><code>response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/text()&apos;).re(r&apos;Name:\s*(.*)&apos;)
</code></pre><p>###第一个
    response.xpath(‘//div[@id=”images”]/a/text()’).extract_first()</p>
<p>###默认值
    response.xpath(‘//div[@id=”not-exists”]/text()’).extract_first(default=’not-found’)</p>
<h2 id="XPath建议"><a href="#XPath建议" class="headerlink" title="XPath建议"></a>XPath建议</h2><h3 id="使用text作为条件时"><a href="#使用text作为条件时" class="headerlink" title="使用text作为条件时"></a>使用text作为条件时</h3><p>避免使用<code>.//text()</code>,直接使用<code>.</code>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; sel.xpath(&quot;//a[contains(., &apos;Next Page&apos;)]&quot;).extract()</div><div class="line">[u&apos;&lt;a href=&quot;#&quot;&gt;Click here to go to the &lt;strong&gt;Next Page&lt;/strong&gt;&lt;/a&gt;&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="node1和-node-1区别"><a href="#node1和-node-1区别" class="headerlink" title="//node1和(//node)1区别"></a>//node<a href="./images/css%E9%80%89%E6%8B%A9%E5%99%A8_1.png" title="css选择器">1</a>和(//node)<a href="./images/css%E9%80%89%E6%8B%A9%E5%99%A8_1.png" title="css选择器">1</a>区别</h3><ul>
<li>//node<a href="./images/css%E9%80%89%E6%8B%A9%E5%99%A8_1.png" title="css选择器">1</a>: 选择所有位于第一个子节点位置的node节点</li>
<li>(//node)<a href="./images/css%E9%80%89%E6%8B%A9%E5%99%A8_1.png" title="css选择器">1</a>: 选择所有的node节点，然后返回结果中的第一个node节点<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sel = Selector(text=doc, type=&quot;html&quot;)</div><div class="line">xp = lambda x: sel.xpath(x).extract()</div><div class="line">xp(&quot;(//li)[1]&quot;)</div><div class="line">xp(&quot;//ul/li[1]&quot;)    #多个</div><div class="line">xp(&quot;(//ul/li)[1]&quot;)  #一个</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="external">CSS</a></h3><p><img src="./images/css%E9%80%89%E6%8B%A9%E5%99%A8_1.png" alt="enter description here" title="css选择器">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">p                        选择所有 &lt;p&gt; 元素。</div><div class="line">.intro                   选择 class=&quot;intro&quot; 的所有元素</div><div class="line">#firstname               选择 id=&quot;firstname&quot; 的所有元素。</div><div class="line">::attr(src) ::text       选择被用户选取的元素部分</div><div class="line">a[src^=&quot;https&quot;]          选择其 src 属性值以 &quot;https&quot; 开头的每个 &lt;a&gt; 元素。</div><div class="line">a[src$=&quot;.pdf&quot;]           选择其 src 属性以 &quot;.pdf&quot; 结尾的所有 &lt;a&gt; 元素。</div><div class="line">a[src*=&quot;abc&quot;]            选择其 src 属性中包含 &quot;abc&quot; 子串的每个 &lt;a&gt; 元素。</div><div class="line"></div><div class="line">div,p                    选择所有 &lt;div&gt; 元素和所有 &lt;p&gt; 元素。</div><div class="line">div p                    选择 &lt;div&gt; 元素内部的所有 &lt;p&gt; 元素。</div><div class="line">div&gt;p                    选择父元素为 &lt;div&gt; 元素的所有 &lt;p&gt; 元素。</div><div class="line">div+p                    选择紧接在 &lt;div&gt; 元素之后的所有 &lt;p&gt; 元素。</div><div class="line"></div><div class="line">[target]                 选择带有 target 属性所有元素。</div><div class="line">[target=_blank]          选择 target=&quot;_blank&quot; 的所有元素。</div><div class="line">[title~=flower]          选择 title 属性包含单词 &quot;flower&quot; 的所有元素</div><div class="line"></div><div class="line">:not(p)                  选择非 &lt;p&gt; 元素的每个元素。</div><div class="line">p~ul                     选择前面有 &lt;p&gt; 元素的每个 &lt;ul&gt; 元素。</div></pre></td></tr></table></figure></p>
<h3 id="Xpath"><a href="#Xpath" class="headerlink" title="Xpath"></a><a href="http://www.w3school.com.cn/xpath/" target="_blank" rel="external">Xpath</a></h3><p><code>XPath相对路径 不使用</code>/<code>开头的</code>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/       从根元素选取</div><div class="line">//      从全文档选取</div><div class="line">.       当前元素</div><div class="line">..      父元素</div><div class="line">@       属性</div><div class="line"></div><div class="line">*       匹配任何元素</div><div class="line">@*      匹配任何属性</div><div class="line">node()  匹配任何类型元素</div><div class="line"></div><div class="line">last()</div><div class="line">not()</div><div class="line">p[not(contains(@class, ‘title’))]</div><div class="line"></div><div class="line">#轴</div><div class="line">ancestor            选取当前节点的所有先辈（父、祖父等）。</div><div class="line">ancestor-or-self    选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</div><div class="line">attribute           选取当前节点的所有属性。</div><div class="line">child               选取当前节点的所有子元素。</div><div class="line">descendant          选取当前节点的所有后代元素（子、孙等）。</div><div class="line">descendant-or-self  选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</div><div class="line">following           选取文档中当前节点的结束标签之后的所有节点。</div><div class="line">namespace            选取当前节点的所有命名空间节点。</div><div class="line">parent              选取当前节点的父节点。</div><div class="line">preceding           选取文档中当前节点的开始标签之前的所有节点。</div><div class="line">preceding-sibling   选取当前节点之前的所有同级节点。</div><div class="line">self                选取当前节点。</div><div class="line"></div><div class="line">#运算</div><div class="line">|</div><div class="line">+</div><div class="line">-</div><div class="line">*</div><div class="line">div</div><div class="line">=</div><div class="line">!=</div><div class="line">&lt;</div><div class="line">&lt;=</div><div class="line">&gt;</div><div class="line">&gt;=</div><div class="line">or</div><div class="line">and</div><div class="line">mod #计算除法的余数</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h2&gt;&lt;h3 id=&quot;文本一&quot;&gt;&lt;a href=&quot;#文本一&quot; class=&quot;headerlink&quot; title=&quot;文本一&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="xpath,css,scrapy" scheme="https://www.xncoding.com/tags/xpath-css-scrapy/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://www.xncoding.com/2018/03/30/python/git.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/git.html</id>
    <published>2018-03-30T07:27:14.497Z</published>
    <updated>2018-03-29T23:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h2><pre><code>git init                                                             //初始化
git add README                                                       //更新README文件 .为所有文件
git commit -m &apos;first commit&apos;                                         //提交更新，并注释信息“first commit”
git remote add origin git@github.com:yeayee/helloworld.git           //连接远程github项目
git push origin master                                               //将本地项目更新到github项目上去
git clone git@github.com:yeayee/helloworld.git helloworld            //把仓库复制到自己的电脑上
git remote rm origin                                                 //删除源origin
git pull origin master                                               //将github上的项目拉下来
git config --global core.editor Notepad++                            //设置编辑器
git config user.name                                                 //查看配置信息
git help &lt;verb&gt;                                                      //查看帮助信息
git status                                                           //查看文件当前处于什么状态
git log                                                              //回顾提交历史
git diff                                                             //查看尚未暂存文件更新了哪些部分
git remote -v                                                        //查看你当前项目远程连接的是哪个仓库地址
git fetch origin                                                     //取得远程更新，这里可以看做是准备要取了
git merge origin/master                                              //把更新的内容合并到本地分支origin/master
git rm src/com/hzh/hibernate/dao/aaa.java                            //移除我们删除了的那个文件aaa.java
git rm src/com/hzh/hibernate/bbb/ -r                                 //-r会把bbb/目录下的所有内容一次性移除
git branch testbranch                                                //命名分支
git checkout testbranch                                              //将testbranch分支设置为当前工作分支
</code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><pre><code>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。
cd ~/.ssh                                                             //查看计算机ssh密钥
ssh-keygen -t rsa -C &quot;85362057@qq.com&quot;                                //填写email地址，生成密钥
ssh -T git@github.com                                                 //测试连接是否成功
git config --global github.token e97279836f0d415a3954c1193dba522f     //配置token
# 显示当前的Git配置
$ git config --list
  git config --global user.email &quot;1726448967@qq.com&quot;
  git config --global user.name &quot;bolearnpython&quot;
$ git help
$ git help config
# 防止http协议每次都要输入密码：
$ git config --global credential.helper &apos;cache --timeout=36000000&apos;      #秒数
# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
git config --global user.name &quot;jake&quot;
git config --global user.email jake@gmail.com
#配置你的编缉器
$ git config --global core.editor emacs
关闭Ignore文件的功能
git config core.fileMode false
删除全局设置
git config --global --unset &lt;entry-name&gt;
清除.gitignore文件中记录的文件
git clean -X -f
git clean &lt;file_name&gt; -f
把某一个分支到导出成一个文件
git bundle create &lt;file&gt; &lt;branch-name&gt;
查看两个星期内的改动
git whatchanged --since=&apos;2 weeks ago&apos;
</code></pre><h2 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h2><pre><code># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre><h2 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h2><pre><code>git commit --amend
查看commit历史

# 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre><h2 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h2><pre><code>1、在本地创建新分支：git branch newbranch
2、在本地切换到新分支：git checkout newbranch
3、将新分支推送到github：git push origin newbranch
4、在本地删除一个分支：git branch -d newbranch
5、在Github远端删除一个分支：git push origin :newbranch
重命名本地分支名。
git branch -m xue xueweihan

# 列出所有本地分支
$ git branch

# 列出所有远程分支 -r参数相当于：remote
$ git branch -r

# 列出所有本地分支和远程分支 -a参数相当于：all
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关忽略系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre><h2 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h2><pre><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre><h2 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h2><pre><code># 显示有变更的文件
$ git status
展示忽略的文件
git status --ignored
# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre><h2 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h2><pre><code># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

修改远程仓库的url
git remote set-url origin &lt;URL&gt;

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

git pull origin master     # 拉取更新

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre><h2 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h2><pre><code>$ git checkout master    # 切到master

# 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到工作区
$ git checkout [commit] [file]

创建并切换到该分支
git checkout -b &lt;branch-name&gt;

2.git checkout -b newBranch origin/master
拷贝一份远程分支origin/master的内容到本地，并新建一个名为newBranch的分支。

# 恢复上一个commit的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]
git revert master~2     回滚
git revert &lt;commit_id&gt; -m &lt;parent_id&gt; 回滚合并
抛弃本地仓库的所有版本(commit)，回到远程仓库的状态。
git fetch --all &amp;&amp; git reset --hard origin/master
</code></pre><h2 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h2><pre><code># 生成一个可供发布的压缩包
$ git archive
[git]git忽略文件
    可以通过创建~/.gitignore_global并添加到git全局配置以减少每层目录的规则重复定义。
    使用命令git config --global core.excludesfile ~/.gitignore_global即可
    .gitignore_global文件中写入要忽略的文件后缀：
    如要忽略“.pyc”的文件，就在.gitignore_global文件中写入 “*.pyc”就ok了。
[git]git add 增加文件，文件名乱码
    在bash提示符下输入：
    git config --global core.quotepath false

展示所有tracked的文件
git ls-files -t
展示所有untracked的文件
git ls-files --others
展示所有忽略的文件
git ls-files --others -i --exclude-standard

git stash -u
展示所有stashes
git stash list
回到某个stash的状态
git stash apply &lt;stash@{n}&gt;
回到最后一个stash的状态，并删除这个stash
git stash pop
删除所有的stash
git stash clear
从stash中拿出某个文件的修改
git checkout &lt;stash@{n}&gt; -- &lt;file_path&gt;
</code></pre><h2 id="使用http代理"><a href="#使用http代理" class="headerlink" title="使用http代理"></a>使用http代理</h2><pre><code>$ git config --global http.proxy http://proxyuser:proxypwd@proxy.server.com:8080

$ git config --global http.proxy http://127.0.0.1:8787  # lantern

查看使用代理：

$ git config --global --get http.proxy

取消http代理：

$ git config --global --unset http.proxy

使用socks代理

$ git config --global https.proxy &apos;socks5://proxyuser:proxypwd@proxy.server.com:8080&apos;

取消socks代理：

$ git config --global --unset https.proxy
</code></pre><h2 id="常用-git-命令清单。几个专用名词的译名如下。"><a href="#常用-git-命令清单。几个专用名词的译名如下。" class="headerlink" title="常用 git 命令清单。几个专用名词的译名如下。"></a>常用 git 命令清单。几个专用名词的译名如下。</h2><pre><code>Workspace：      工作区
Index / Stage：  暂存区
Repository：     仓库区（或本地仓库）
Remote：         远程仓库
master分支， 即主分支。任何项目都必须有个这个分支。对项目进行tag或发布版本等操作，都必须在该分支上进行。
develop分支，即开发分支，从master分支上检出。团队成员一般不会直接更改该分支，而是分别从该分支检出自己的feature分支，开发完成后将feature分支上的改动merge回develop分支。同时release分支由此分支检出。
release分支，即发布分支，从develop分支上检出。该分支用作发版前的测试，可进行简单的bug修复。如果bug修复比较复杂，可merge回develop分支后由其他分支进行bug修复。此分支测试完成后，需要同时merge到master和develop分支上。
feature分支，即功能分支，从develop分支上检出。团队成员中每个人都维护一个自己的feature分支，并进行开发工作，开发完成后将此分支merge回develop分支。此分支一般用来开发新功能或进行项目维护等。
fix分支，  即补丁分支，由develop分支检出，用作bug修复，bug修复完成需merge回develop分支，并将其删除。所以该分支属于临时性分支。
hotfix分支， 即热补丁分支。和fix分支的区别在于，该分支由master分支检出，进行线上版本的bug修复，修复完成后merge回master分支，并merge到develop分支上，merge完成后也可以将其删除，也属于临时性分支。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h1&gt;&lt;h2 id=&quot;一、新建代码库&quot;&gt;&lt;a href=&quot;#一、新建代码库&quot; class=&quot;headerlink&quot; title=&quot;一、新建代码库
    
    </summary>
    
    
      <category term="git" scheme="https://www.xncoding.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>错误合集</title>
    <link href="https://www.xncoding.com/2018/03/30/python/%E9%94%99%E8%AF%AF%E5%90%88%E9%9B%86.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/错误合集.html</id>
    <published>2018-03-30T07:27:14.495Z</published>
    <updated>2018-03-29T23:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test=&quot;(&apos;0&apos;,&apos;!LZX&apos;,&apos;\\x00\\x00\\x00\\x00\\x66\\xe7\\x85\\x47&apos;,&apos;3b58a39341b3e74d93cc7dd083e634d0d5f92779b9d9f5fd64e9a76c49e3167d201ed432c172732f933fff1ad7e35c00b8e5996ded003d87&apos;,&apos;2&apos;)&quot;</div><div class="line">eval(test)</div></pre></td></tr></table></figure>
<p>第三个变了，’\’转义符在命令行参数输入中的错误</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误1&quot;&gt;&lt;a href=&quot;#错误1&quot; class=&quot;headerlink&quot; title=&quot;错误1&quot;&gt;&lt;/a&gt;错误1&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
    
      <category term="错误" scheme="https://www.xncoding.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://www.xncoding.com/2018/03/30/python/readme.html"/>
    <id>https://www.xncoding.com/2018/03/30/python/readme.html</id>
    <published>2018-03-30T07:27:12.862Z</published>
    <updated>2018-03-29T23:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用<a href="https://markdown.xiaoshujiang.com" target="_blank" rel="external">小书匠编辑器</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎使用&lt;a href=&quot;https://markdown.xiaoshujiang.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;小书匠编辑器&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>adb</title>
    <link href="https://www.xncoding.com/2017/11/02/python/adb.html"/>
    <id>https://www.xncoding.com/2017/11/02/python/adb.html</id>
    <published>2017-11-02T14:41:45.000Z</published>
    <updated>2017-11-02T14:44:21.820Z</updated>
    
    <content type="html"><![CDATA[<p>adb<a name="adb_1"></a><a name="adb"></a></p>
<h1 id="adb"><a href="#adb" class="headerlink" title="adb"></a>adb</h1><ul>
<li><a href="#">基本用法</a><ul>
<li><a href="#">命令语法</a></li>
<li><a href="#">为命令指定目标设备</a></li>
<li><a href="#">启动/停止</a></li>
<li><a href="#">查看 adb 版本</a></li>
<li><a href="#">以 root 权限运行 adbd</a></li>
<li><a href="#">指定 adb server 的网络端口</a></li>
</ul>
</li>
<li><a href="#">设备连接管理</a><ul>
<li><a href="#">查询已连接设备/模拟器</a></li>
<li><a href="#">USB 连接</a></li>
<li><a href="#">无线连接（需要借助 USB 线）</a></li>
<li><a href="#">无线连接（无需借助 USB 线）</a></li>
</ul>
</li>
<li><a href="#">应用管理</a><ul>
<li><a href="#">查看应用列表</a><ul>
<li><a href="#">所有应用</a></li>
<li><a href="#">系统应用</a></li>
<li><a href="#">第三方应用</a></li>
<li><a href="#">包名包含某字符串的应用</a></li>
</ul>
</li>
<li><a href="#">安装 APK</a></li>
<li><a href="#">卸载应用</a></li>
<li><a href="#">清除应用数据与缓存</a></li>
<li><a href="#">查看前台 Activity</a></li>
<li><a href="#">查看正在运行的 Services</a></li>
</ul>
</li>
<li><a href="#">与应用交互</a><ul>
<li><a href="#">调起 Activity</a></li>
<li><a href="#">调起 Service</a></li>
<li><a href="#">发送广播</a></li>
<li><a href="#">强制停止应用</a></li>
</ul>
</li>
<li><a href="#">文件管理</a><ul>
<li><a href="#">复制设备里的文件到电脑</a></li>
<li><a href="#">复制电脑里的文件到设备</a></li>
</ul>
</li>
<li><a href="#">模拟按键/输入</a><ul>
<li><a href="#">电源键</a></li>
<li><a href="#">菜单键</a></li>
<li><a href="#">HOME 键</a></li>
<li><a href="#">返回键</a></li>
<li><a href="#">音量控制</a></li>
<li><a href="#">媒体控制</a></li>
<li><a href="#">点亮/熄灭屏幕</a></li>
<li><a href="#">滑动解锁</a></li>
<li><a href="#">输入文本</a></li>
</ul>
</li>
<li><a href="#">查看日志</a><ul>
<li><a href="#">Android 日志</a><ul>
<li><a href="#">按级别过滤日志</a></li>
<li><a href="#">按 tag 和级别过滤日志</a></li>
<li><a href="#">日志格式</a></li>
<li><a href="#">清空日志</a></li>
</ul>
</li>
<li><a href="#">内核日志</a></li>
</ul>
</li>
<li><a href="#">查看设备信息</a><ul>
<li><a href="#">型号</a></li>
<li><a href="#">电池状况</a></li>
<li><a href="#">屏幕分辨率</a></li>
<li><a href="#">屏幕密度</a></li>
<li><a href="#">显示屏参数</a></li>
<li><a href="#">android_id</a></li>
<li><a href="#">IMEI</a></li>
<li><a href="#">Android 系统版本</a></li>
<li><a href="#">IP 地址</a></li>
<li><a href="#">Mac 地址</a></li>
<li><a href="#">CPU 信息</a></li>
<li><a href="#">内存信息</a></li>
<li><a href="#">更多硬件与系统属性</a></li>
</ul>
</li>
<li><a href="#">修改设置</a><ul>
<li><a href="#">分辨率</a></li>
<li><a href="#">屏幕密度</a></li>
<li><a href="#">显示区域</a></li>
<li><a href="#">关闭 USB 调试模式</a></li>
<li><a href="#">状态栏和导航栏的显示隐藏</a></li>
</ul>
</li>
<li><a href="#">实用功能</a><ul>
<li><a href="#">屏幕截图</a></li>
<li><a href="#">录制屏幕</a></li>
<li><a href="#">重新挂载 system 分区为可写</a></li>
<li><a href="#">查看连接过的 WiFi 密码</a></li>
<li><a href="#">设置系统日期和时间</a></li>
<li><a href="#">重启手机</a></li>
<li><a href="#">检测设备是否已 root</a></li>
<li><a href="#">使用 Monkey 进行压力测试</a></li>
<li><a href="#">开启/关闭 WiFi</a></li>
</ul>
</li>
<li><a href="#">刷机相关命令</a><ul>
<li><a href="#">重启到 Recovery 模式</a></li>
<li><a href="#">从 Recovery 重启到 Android</a></li>
<li><a href="#">重启到 Fastboot 模式</a></li>
<li><a href="#">通过 sideload 更新系统</a></li>
</ul>
</li>
<li><a href="#">更多 adb shell 命令</a><ul>
<li><a href="#">查看进程</a></li>
<li><a href="#">查看实时资源占用情况</a></li>
<li><a href="#">其它</a></li>
</ul>
</li>
<li><a href="#">常见问题</a><ul>
<li><a href="#">启动 adb server 失败</a></li>
</ul>
</li>
<li><a href="#">adb 的非官方实现</a></li>
<li><a href="#">致谢</a></li>
<li><a href="#">参考链接</a></li>
</ul>
<p><a name="e59fbae69cace794a8e6b395_2"></a><a name="基本用法"></a></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><a name="e591bde4bba4e8afade6b395_3"></a><a name="命令语法"></a></p>
<h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</div></pre></td></tr></table></figure>
<p>如果只有一个设备/模拟器连接时，可以省略掉 <code>[-d|-e|-s &lt;serialNumber&gt;]</code> 这一部分，直接使用 <code>adb &lt;command&gt;</code>。</p>
<p><a name="e4b8bae591bde4bba4e68c87e5ae9ae79baee6a087e8aebee5a487_4"></a><a name="为命令指定目标设备"></a></p>
<h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>指定当前唯一通过 USB 连接的 Android 设备为命令目标</td>
</tr>
<tr>
<td>-e</td>
<td>指定当前唯一运行的模拟器为命令目标</td>
</tr>
<tr>
<td><code>-s &lt;serialNumber&gt;</code></td>
<td>指定相应 serialNumber 号的设备/模拟器为命令目标</td>
</tr>
</tbody>
</table>
<p>在多个设备/模拟器连接的情况下较常用的是 <code>-s &lt;serialNumber&gt;</code> 参数，serialNumber 可以通过 <code>adb devices</code> 命令获取。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ adb devices</div><div class="line"></div><div class="line">List of devices attached</div><div class="line">cf264b8f    device</div><div class="line">emulator-5554   device</div><div class="line">10.129.164.6:5555   device</div></pre></td></tr></table></figure>
<p>输出里的 <code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 即为 serialNumber。</p>
<p>比如这时想指定 <code>cf264b8f</code> 这个设备来运行 adb 命令获取屏幕分辨率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -s cf264b8f shell wm size</div></pre></td></tr></table></figure>
<p>又如想给 <code>10.129.164.6:5555</code> 这个设备安装应用（<em>这种形式的 serialNumber 格式为 <code>&lt;IP&gt;:&lt;Port&gt;</code>，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器</em>）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -s 10.129.164.6:5555 install test.apk</div></pre></td></tr></table></figure>
<p><strong>遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。</strong></p>
<p><a name="e590afe58aa8e5819ce6ada2_5"></a><a name="启动停止"></a></p>
<h3 id="启动-停止"><a href="#启动-停止" class="headerlink" title="启动/停止"></a>启动/停止</h3><p>启动 adb server 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb start-server</div></pre></td></tr></table></figure>
<p>（一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。）</p>
<p>停止 adb server 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb kill-server</div></pre></td></tr></table></figure>
<p><a name="e69fa5e79c8b20adb20e78988e69cac_6"></a><a name="查看-adb-版本"></a></p>
<h3 id="查看-adb-版本"><a href="#查看-adb-版本" class="headerlink" title="查看 adb 版本"></a>查看 adb 版本</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb version</div></pre></td></tr></table></figure>
<p>示例输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Android Debug Bridge version 1.0.36</div><div class="line">Revision 8f855a3d9b35-android</div></pre></td></tr></table></figure>
<p><a name="e4bba520root20e69d83e99990e8bf90e8a18c20adbd_7"></a><a name="以-root-权限运行-adbd"></a></p>
<h3 id="以-root-权限运行-adbd"><a href="#以-root-权限运行-adbd" class="headerlink" title="以 root 权限运行 adbd"></a>以 root 权限运行 adbd</h3><p>adb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。</p>
<p>所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 <code>adb xxx</code> 执行。这时可以 <code>adb shell</code> 然后 <code>su</code> 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb root</div></pre></td></tr></table></figure>
<p>正常输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restarting adbd as root</div></pre></td></tr></table></figure>
<p>现在再运行 <code>adb shell</code>，看看命令行提示符是不是变成 <code>#</code> 了？</p>
<p>有些手机 root 后也无法通过 <code>adb root</code> 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 <code>adbd cannot run as root in production builds</code>，此时可以先安装 adbd Insecure，然后 <code>adb root</code> 试试。</p>
<p>相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 <code>adb unroot</code> 命令。</p>
<p><a name="e68c87e5ae9a20adb20server20e79a84e7bd91e7bb9ce7abafe58fa3_8"></a><a name="指定-adb-server-的网络端口"></a></p>
<h3 id="指定-adb-server-的网络端口"><a href="#指定-adb-server-的网络端口" class="headerlink" title="指定 adb server 的网络端口"></a>指定 adb server 的网络端口</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb -P &lt;port&gt; start-server</div></pre></td></tr></table></figure>
<p>默认端口为 5037。</p>
<p><a name="e8aebee5a487e8bf9ee68ea5e7aea1e79086_9"></a><a name="设备连接管理"></a></p>
<h2 id="设备连接管理"><a href="#设备连接管理" class="headerlink" title="设备连接管理"></a>设备连接管理</h2><p><a name="e69fa5e8afa2e5b7b2e8bf9ee68ea5e8aebee5a487e6a8a1e68b9fe599a8_10"></a><a name="查询已连接设备模拟器"></a></p>
<h3 id="查询已连接设备-模拟器"><a href="#查询已连接设备-模拟器" class="headerlink" title="查询已连接设备/模拟器"></a>查询已连接设备/模拟器</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div><div class="line">cf264b8f    device</div><div class="line">emulator-5554   device</div><div class="line">10.129.164.6:5555   device</div></pre></td></tr></table></figure>
<p>输出格式为 <code>[serialNumber] [state]</code>，serialNumber 即我们常说的 SN，state 有如下几种：</p>
<ul>
<li><p><code>offline</code> —— 表示设备未连接成功或无响应。</p>
</li>
<li><p><code>device</code> —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。</p>
</li>
<li><p><code>no device</code> —— 没有设备/模拟器连接。</p>
</li>
</ul>
<p>以上输出显示当前已经连接了三台设备/模拟器，<code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 分别是它们的 SN。从 <code>emulator-5554</code> 这个名字可以看出它是一个 Android 模拟器，而 <code>10.129.164.6:5555</code> 这种形为 <code>&lt;IP&gt;:&lt;Port&gt;</code> 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。</p>
<p>常见异常输出：</p>
<ol>
<li><p>没有设备/模拟器连接成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div></pre></td></tr></table></figure>
</li>
<li><p>设备/模拟器未连接到 adb 或无响应。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List of devices attached</div><div class="line">cf264b8f    offline</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a name="usb20e8bf9ee68ea5_11"></a><a name="usb-连接"></a></p>
<h3 id="USB-连接"><a href="#USB-连接" class="headerlink" title="USB 连接"></a>USB 连接</h3><p>通过 USB 连接来正常使用 adb 需要保证几点：</p>
<ol>
<li><p>硬件状态正常。</p>
<p>包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。</p>
</li>
<li><p>Android 设备的开发者选项和 USB 调试模式已开启。</p>
<p>可以到「设置」-「开发者选项」-「Android 调试」查看。</p>
<p>如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。</p>
</li>
<li><p>设备驱动状态正常。</p>
<p>这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。</p>
</li>
<li><p>通过 USB 线连接好电脑和设备后确认状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>如果能看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxxxxx device</div></pre></td></tr></table></figure>
<p>说明连接成功。</p>
</li>
</ol>
<p><a name="e697a0e7babfe8bf9ee68ea5efbc88e99c80e8a681e5809fe58aa920usb20e7babfefbc89_12"></a><a name="无线连接需要借助-usb-线"></a></p>
<h3 id="无线连接（需要借助-USB-线）"><a href="#无线连接（需要借助-USB-线）" class="headerlink" title="无线连接（需要借助 USB 线）"></a>无线连接（需要借助 USB 线）</h3><p>除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！</p>
<p>操作步骤：</p>
<ol>
<li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p>
</li>
<li><p>将设备与电脑通过 USB 线连接。</p>
<p>应确保连接成功（可运行 <code>adb devices</code> 看是否能列出该设备）。</p>
</li>
<li><p>让设备在 5555 端口监听 TCP/IP 连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb tcpip 5555</div></pre></td></tr></table></figure>
</li>
<li><p>断开 USB 连接。</p>
</li>
<li><p>找到设备的 IP 地址。</p>
<p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="#">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p>
</li>
<li><p>通过 IP 地址连接设备。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb connect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p>
</li>
<li><p>确认连接状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb devices</div></pre></td></tr></table></figure>
<p>如果能看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;device-ip-address&gt;:5555 device</div></pre></td></tr></table></figure>
<p>说明连接成功。</p>
</li>
</ol>
<p>如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 <code>adb connect &lt;device-ip-address&gt;</code> 那一步；</p>
<p>如果还是不行的话，通过 <code>adb kill-server</code> 重新启动 adb 然后从头再来一次试试。</p>
<p><strong>断开无线连接</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb disconnect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p><a name="e697a0e7babfe8bf9ee68ea5efbc88e697a0e99c80e5809fe58aa920usb20e7babfefbc89_13"></a><a name="无线连接无需借助-usb-线"></a></p>
<h3 id="无线连接（无需借助-USB-线）"><a href="#无线连接（无需借助-USB-线）" class="headerlink" title="无线连接（无需借助 USB 线）"></a>无线连接（无需借助 USB 线）</h3><p><strong>注：需要 root 权限。</strong></p>
<p>上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。</p>
<p>既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。</p>
<ol>
<li><p>在 Android 设备上安装一个终端模拟器。</p>
<p>已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：<a href="https://jackpal.github.io/Android-Terminal-Emulator/" target="_blank" rel="external">Terminal Emulator for Android Downloads</a></p>
</li>
<li><p>将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。</p>
</li>
<li><p>打开 Android 设备上的终端模拟器，在里面依次运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">su</div><div class="line">setprop service.adb.tcp.port 5555</div></pre></td></tr></table></figure>
</li>
<li><p>找到 Android 设备的 IP 地址。</p>
<p>一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 <a href="#">查看设备信息 - IP 地址</a> 一节里的方法用 adb 命令来查看。</p>
</li>
<li><p>在电脑上通过 adb 和 IP 地址连接 Android 设备。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb connect &lt;device-ip-address&gt;</div></pre></td></tr></table></figure>
<p>这里的 <code>&lt;device-ip-address&gt;</code> 就是上一步中找到的设备 IP 地址。</p>
<p>如果能看到 <code>connected to &lt;device-ip-address&gt;:5555</code> 这样的输出则表示连接成功。</p>
</li>
</ol>
<p><em>节注一：</em></p>
<p>有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restart adbd</div></pre></td></tr></table></figure>
<p>如果 restart 无效，尝试以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">stop adbd</div><div class="line">start adbd</div></pre></td></tr></table></figure>
<p><a name="e5ba94e794a8e7aea1e79086_14"></a><a name="应用管理"></a></p>
<h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><p><a name="e69fa5e79c8be5ba94e794a8e58897e8a1a8_15"></a><a name="查看应用列表"></a></p>
<h3 id="查看应用列表"><a href="#查看应用列表" class="headerlink" title="查看应用列表"></a>查看应用列表</h3><p>查看应用列表的基本命令格式是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER]</div></pre></td></tr></table></figure>
<p>即在 <code>adb shell pm list packages</code> 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>显示列表</th>
</tr>
</thead>
<tbody>
<tr>
<td>无</td>
<td>所有应用</td>
</tr>
<tr>
<td>-f</td>
<td>显示应用关联的 apk 文件</td>
</tr>
<tr>
<td>-d</td>
<td>只显示 disabled 的应用</td>
</tr>
<tr>
<td>-e</td>
<td>只显示 enabled 的应用</td>
</tr>
<tr>
<td>-s</td>
<td>只显示系统应用</td>
</tr>
<tr>
<td>-3</td>
<td>只显示第三方应用</td>
</tr>
<tr>
<td>-i</td>
<td>显示应用的 installer</td>
</tr>
<tr>
<td>-u</td>
<td>包含已卸载应用</td>
</tr>
<tr>
<td><code>&lt;FILTER&gt;</code></td>
<td>包名包含 <code>&lt;FILTER&gt;</code> 字符串</td>
</tr>
</tbody>
</table>
<p><a name="e68980e69c89e5ba94e794a8_16"></a><a name="所有应用"></a></p>
<h4 id="所有应用"><a href="#所有应用" class="headerlink" title="所有应用"></a>所有应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package:com.android.smoketest</div><div class="line">package:com.example.android.livecubes</div><div class="line">package:com.android.providers.telephony</div><div class="line">package:com.google.android.googlequicksearchbox</div><div class="line">package:com.android.providers.calendar</div><div class="line">package:com.android.providers.media</div><div class="line">package:com.android.protips</div><div class="line">package:com.android.documentsui</div><div class="line">package:com.android.gallery</div><div class="line">package:com.android.externalstorage</div><div class="line">...</div><div class="line">// other packages here</div><div class="line">...</div></pre></td></tr></table></figure>
<p><a name="e7b3bbe7bb9fe5ba94e794a8_17"></a><a name="系统应用"></a></p>
<h4 id="系统应用"><a href="#系统应用" class="headerlink" title="系统应用"></a>系统应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages -s</div></pre></td></tr></table></figure>
<p><a name="e7acace4b889e696b9e5ba94e794a8_18"></a><a name="第三方应用"></a></p>
<h4 id="第三方应用"><a href="#第三方应用" class="headerlink" title="第三方应用"></a>第三方应用</h4><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages -3</div></pre></td></tr></table></figure>
<p><a name="e58c85e5908de58c85e590abe69f90e5ad97e7aca6e4b8b2e79a84e5ba94e794a8_19"></a><a name="包名包含某字符串的应用"></a></p>
<h4 id="包名包含某字符串的应用"><a href="#包名包含某字符串的应用" class="headerlink" title="包名包含某字符串的应用"></a>包名包含某字符串的应用</h4><p>比如要查看包名包含字符串 <code>mazhuang</code> 的应用列表，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages mazhuang</div></pre></td></tr></table></figure>
<p>当然也可以使用 grep 来过滤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm list packages | grep mazhuang</div></pre></td></tr></table></figure>
<p><a name="e5ae89e8a38520apk_20"></a><a name="安装-apk"></a></p>
<h3 id="安装-APK"><a href="#安装-APK" class="headerlink" title="安装 APK"></a>安装 APK</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb install [-lrtsdg] &lt;path_to_apk&gt;</div></pre></td></tr></table></figure>
<p>参数：</p>
<p><code>adb install</code> 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-l</td>
<td>将应用安装到保护目录 /mnt/asec</td>
</tr>
<tr>
<td>-r</td>
<td>允许覆盖安装</td>
</tr>
<tr>
<td>-t</td>
<td>允许安装 AndroidManifest.xml 里 application 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td>
</tr>
<tr>
<td>-s</td>
<td>将应用安装到 sdcard</td>
</tr>
<tr>
<td>-d</td>
<td>允许降级覆盖安装</td>
</tr>
<tr>
<td>-g</td>
<td>授予所有运行时权限</td>
</tr>
</tbody>
</table>
<p>运行命令后如果见到类似如下输出（状态为 <code>Success</code>）代表安装成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[100%] /data/local/tmp/1.apk</div><div class="line">    pkg: /data/local/tmp/1.apk</div><div class="line">Success</div></pre></td></tr></table></figure>
<p>上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。</p>
<p>使用旧版本 adb 的输出则是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">12040 KB/s (22205609 bytes in 1.801s)</div><div class="line">        pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apk</div><div class="line">Success</div></pre></td></tr></table></figure>
<p>而如果状态为 <code>Failure</code> 则表示安装失败，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[100%] /data/local/tmp/map-20160831.apk</div><div class="line">        pkg: /data/local/tmp/map-20160831.apk</div><div class="line">Failure [INSTALL_FAILED_ALREADY_EXISTS]</div></pre></td></tr></table></figure>
<p>常见安装失败输出代码、含义及可能的解决办法如下：</p>
<table>
<thead>
<tr>
<th>输出</th>
<th>含义</th>
<th>解决办法</th>
</tr>
</thead>
<tbody>
<tr>
<td>INSTALL_FAILED_ALREADY_EXISTS</td>
<td>应用已经存在，或卸载了但没卸载干净</td>
<td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td>INSTALL_FAILED_INVALID_APK</td>
<td>无效的 APK 文件</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_INVALID_URI</td>
<td>无效的 APK 文件名</td>
<td>确保 APK 文件名里无中文</td>
</tr>
<tr>
<td>INSTALL_FAILED_INSUFFICIENT_STORAGE</td>
<td>空间不足</td>
<td>清理空间</td>
</tr>
<tr>
<td>INSTALL_FAILED_DUPLICATE_PACKAGE</td>
<td>已经存在同名程序</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_NO_SHARED_USER</td>
<td>请求的共享用户不存在</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_UPDATE_INCOMPATIBLE</td>
<td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td>
<td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td>
<td>请求的共享用户存在但签名不一致</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_MISSING_SHARED_LIBRARY</td>
<td>安装包使用了设备上不可用的共享库</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_REPLACE_COULDNT_DELETE</td>
<td>替换时无法删除</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_DEXOPT</td>
<td>dex 优化验证失败或空间不足</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_OLDER_SDK</td>
<td>设备系统版本低于应用要求</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CONFLICTING_PROVIDER</td>
<td>设备里已经存在与应用里同名的 content provider</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_NEWER_SDK</td>
<td>设备系统版本高于应用要求</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_TEST_ONLY</td>
<td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td>
<td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_MISSING_FEATURE</td>
<td>应用使用了设备不可用的功能</td>
<td></td>
</tr>
<tr>
<td>INSTALL_FAILED_CONTAINER_ERROR</td>
<td>1. sdcard 访问失败;</td>
</tr>
</tbody>
</table>
<p>2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 确认 sdcard 可用，或者安装到内置存储;
2. 打包时不与 ROM 使用相同签名。 |
| INSTALL_FAILED_INVALID_INSTALL_LOCATION | 1. 不能安装到指定位置;
2. 应用签名与 ROM 签名一致，被当作内置应用。 | 1. 切换安装位置，添加或删除 <code>-s</code> 参数;
2. 打包时不与 ROM 使用相同签名。 |
| INSTALL_FAILED_MEDIA_UNAVAILABLE | 安装位置不可用 | 一般为 sdcard，确认 sdcard 可用或安装到内置存储 |
| INSTALL_FAILED_VERIFICATION_TIMEOUT | 验证安装包超时 |  |
| INSTALL_FAILED_VERIFICATION_FAILURE | 验证安装包失败 |  |
| INSTALL_FAILED_PACKAGE_CHANGED | 应用与调用程序期望的不一致 |  |
| INSTALL_FAILED_UID_CHANGED | 以前安装过该应用，与本次分配的 UID 不一致 | 清除以前安装过的残留文件 |
| INSTALL_FAILED_VERSION_DOWNGRADE | 已经安装了该应用更高版本 | 使用 <code>-d</code> 参数 |
| INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE | 已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限 |  |
| INSTALL_PARSE_FAILED_NOT_APK | 指定路径不是文件，或不是以 <code>.apk</code> 结尾 |  |
| INSTALL_PARSE_FAILED_BAD_MANIFEST | 无法解析的 AndroidManifest.xml 文件 |  |
| INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION | 解析器遇到异常 |  |
| INSTALL_PARSE_FAILED_NO_CERTIFICATES | 安装包没有签名 |  |
| INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES | 已安装该应用，且签名与 APK 文件不一致 | 先卸载设备上的该应用，再安装 |
| INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING | 解析 APK 文件时遇到 <code>CertificateEncodingException</code> |  |
| INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME | manifest 文件里没有或者使用了无效的包名 |  |
| INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID | manifest 文件里指定了无效的共享用户 ID |  |
| INSTALL_PARSE_FAILED_MANIFEST_MALFORMED | 解析 manifest 文件时遇到结构性错误 |  |
| INSTALL_PARSE_FAILED_MANIFEST_EMPTY | 在 manifest 文件里找不到找可操作标签（instrumentation 或 application） |  |
| INSTALL_FAILED_INTERNAL_ERROR | 因系统问题安装失败 |  |
| INSTALL_FAILED_USER_RESTRICTED | 用户被限制安装应用 |  |
| INSTALL_FAILED_DUPLICATE_PERMISSION | 应用尝试定义一个已经存在的权限名称 |  |
| INSTALL_FAILED_NO_MATCHING_ABIS | 应用包含设备的应用程序二进制接口不支持的 native code |  |
| INSTALL_CANCELED_BY_USER | 应用安装需要在设备上确认，但未操作设备或点了取消 | 在设备上同意安装 |
| INSTALL_FAILED_ACWF_INCOMPATIBLE | 应用程序与设备不兼容 |  |
| does not contain AndroidManifest.xml | 无效的 APK 文件 |  |
| is not a valid zip file | 无效的 APK 文件 |  |
| Offline | 设备未连接成功 | 先将设备与 adb 连接成功 |
| unauthorized | 设备未授权允许调试 |  |
| error: device not found | 没有连接成功的设备 | 先将设备与 adb 连接成功 |
| protocol failure | 设备已断开连接 | 先将设备与 adb 连接成功 |
| Unknown option: -s | Android 2.2 以下不支持安装到 sdcard | 不使用 <code>-s</code> 参数 |
| No space left on device | 空间不足 | 清理空间 |
| Permission denied … sdcard … | sdcard 不可用 |  |
| signatures do not match the previously installed version; ignoring! | 已安装该应用且签名不一致 | 先卸载设备上的该应用，再安装 |</p>
<p>参考：<a href="https://github.com/android/platform_frameworks_base/blob/master/core%2Fjava%2Fandroid%2Fcontent%2Fpm%2FPackageManager.java" target="_blank" rel="external">PackageManager.java</a></p>
<p><em><code>adb install</code> 内部原理简介</em></p>
<p><code>adb install</code> 实际是分三步完成：</p>
<ol>
<li><p>push apk 文件到 /data/local/tmp。</p>
</li>
<li><p>调用 pm install 安装。</p>
</li>
<li><p>删除 /data/local/tmp 下的对应 apk 文件。</p>
</li>
</ol>
<p>所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。</p>
<p><a name="e58db8e8bdbde5ba94e794a8_21"></a><a name="卸载应用"></a></p>
<h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall [-k] &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 表示应用的包名，<code>-k</code> 参数可选，表示卸载应用但保留数据和缓存目录。</p>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb uninstall com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示卸载 360 手机卫士。</p>
<p><a name="e6b885e999a4e5ba94e794a8e695b0e68daee4b88ee7bc93e5ad98_22"></a><a name="清除应用数据与缓存"></a></p>
<h3 id="清除应用数据与缓存"><a href="#清除应用数据与缓存" class="headerlink" title="清除应用数据与缓存"></a>清除应用数据与缓存</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。</p>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示清除 360 手机卫士的数据和缓存。</p>
<p><a name="e69fa5e79c8be5898de58fb020activity_23"></a><a name="查看前台-activity"></a></p>
<h3 id="查看前台-Activity"><a href="#查看前台-Activity" class="headerlink" title="查看前台 Activity"></a>查看前台 Activity</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity activities | grep mFocusedActivity</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mFocusedActivity: ActivityRecord&#123;8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42&#125;</div></pre></td></tr></table></figure>
<p>其中的 <code>com.cyanogenmod.trebuchet/com.android.launcher3.Launcher</code> 就是当前处于前台的 Activity。</p>
<p><a name="e69fa5e79c8be6ada3e59ca8e8bf90e8a18ce79a8420services_24"></a><a name="查看正在运行的-services"></a></p>
<h3 id="查看正在运行的-Services"><a href="#查看正在运行的-Services" class="headerlink" title="查看正在运行的 Services"></a>查看正在运行的 Services</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity services [&lt;packagename&gt;]</div></pre></td></tr></table></figure>
<p><code>&lt;packagename&gt;</code> 参数不是必须的，指定 <code>&lt;packagename&gt;</code> 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。</p>
<p><code>&lt;packagename&gt;</code> 不一定要给出完整的包名，比如运行 <code>adb shell dumpsys activity services org.mazhuang</code>，那么包名 <code>org.mazhuang.demo1</code>、<code>org.mazhuang.demo2</code> 和 <code>org.mazhuang123</code> 等相关的 Services 都会列出来。</p>
<p><a name="e4b88ee5ba94e794a8e4baa4e4ba92_25"></a><a name="与应用交互"></a></p>
<h2 id="与应用交互"><a href="#与应用交互" class="headerlink" title="与应用交互"></a>与应用交互</h2><p>主要是使用 <code>am &lt;command&gt;</code> 命令，常用的 <code>&lt;command&gt;</code> 如下：</p>
<table>
<thead>
<tr>
<th>command</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start [options] &lt;INTENT&gt;</code></td>
<td>启动 <code>&lt;INTENT&gt;</code> 指定的 Activity</td>
</tr>
<tr>
<td><code>startservice [options] &lt;INTENT&gt;</code></td>
<td>启动 <code>&lt;INTENT&gt;</code> 指定的 Service</td>
</tr>
<tr>
<td><code>broadcast [options] &lt;INTENT&gt;</code></td>
<td>发送 <code>&lt;INTENT&gt;</code> 指定的广播</td>
</tr>
<tr>
<td><code>force-stop &lt;packagename&gt;</code></td>
<td>停止 <code>&lt;packagename&gt;</code> 相关的进程</td>
</tr>
</tbody>
</table>
<p><code>&lt;INTENT&gt;</code> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。</p>
<p>用于决定 intent 对象的选项如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a &lt;ACTION&gt;</code></td>
<td>指定 action，比如 <code>android.intent.action.VIEW</code></td>
</tr>
<tr>
<td><code>-c &lt;CATEGORY&gt;</code></td>
<td>指定 category，比如 <code>android.intent.category.APP_CONTACTS</code></td>
</tr>
<tr>
<td><code>-n &lt;COMPONENT&gt;</code></td>
<td>指定完整 component 名，用于明确指定启动哪个 Activity，如 <code>com.example.app/.ExampleActivity</code></td>
</tr>
</tbody>
</table>
<p><code>&lt;INTENT&gt;</code> 里还能带数据，就像写代码时的 Bundle 一样：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--esn &lt;EXTRA_KEY&gt;</code></td>
<td>null 值（只有 key 名）</td>
</tr>
<tr>
<td>`-e</td>
<td>–es <extra_key> <extra_string_value>`</extra_string_value></extra_key></td>
<td>string 值</td>
</tr>
<tr>
<td><code>--ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt;</code></td>
<td>boolean 值</td>
</tr>
<tr>
<td><code>--ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;</code></td>
<td>integer 值</td>
</tr>
<tr>
<td><code>--el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;</code></td>
<td>long 值</td>
</tr>
<tr>
<td><code>--ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt;</code></td>
<td>float 值</td>
</tr>
<tr>
<td><code>--eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt;</code></td>
<td>URI</td>
</tr>
<tr>
<td><code>--ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt;</code></td>
<td>component name</td>
</tr>
<tr>
<td><code>--eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...]</code></td>
<td>integer 数组</td>
</tr>
<tr>
<td><code>--ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...]</code></td>
<td>long 数组</td>
</tr>
</tbody>
</table>
<p><a name="e8b083e8b5b720activity_26"></a><a name="调起-activity"></a></p>
<h3 id="调起-Activity"><a href="#调起-Activity" class="headerlink" title="调起 Activity"></a>调起 Activity</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -n com.tencent.mm/.ui.LauncherUI</div></pre></td></tr></table></figure>
<p>表示调起微信主界面。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es &quot;toast&quot; &quot;hello, world&quot;</div></pre></td></tr></table></figure>
<p>表示调起 <code>org.mazhuang.boottimemeasure/.MainActivity</code> 并传给它 string 数据键值对 <code>toast - hello, world</code>。</p>
<p><a name="e8b083e8b5b720service_27"></a><a name="调起-service"></a></p>
<h3 id="调起-Service"><a href="#调起-Service" class="headerlink" title="调起 Service"></a>调起 Service</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am startservice [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</div></pre></td></tr></table></figure>
<p>表示调起微信的某 Service。</p>
<p><a name="e58f91e98081e5b9bfe692ad_28"></a><a name="发送广播"></a></p>
<h3 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast [options] &lt;INTENT&gt;</div></pre></td></tr></table></figure>
<p>可以向所有组件广播，也可以只向指定组件广播。</p>
<p>例如，向所有组件广播 <code>BOOT_COMPLETED</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</div></pre></td></tr></table></figure>
<p>又例如，只向 <code>org.mazhuang.boottimemeasure/.BootCompletedReceiver</code> 广播 <code>BOOT_COMPLETED</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver</div></pre></td></tr></table></figure>
<p>这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。</p>
<p>既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机：</p>
<table>
<thead>
<tr>
<th>action</th>
<th>触发时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>android.net.conn.CONNECTIVITY_CHANGE</td>
<td>网络连接发生变化</td>
</tr>
<tr>
<td>android.intent.action.SCREEN_ON</td>
<td>屏幕点亮</td>
</tr>
<tr>
<td>android.intent.action.SCREEN_OFF</td>
<td>屏幕熄灭</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_LOW</td>
<td>电量低，会弹出电量低提示框</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_OKAY</td>
<td>电量恢复了</td>
</tr>
<tr>
<td>android.intent.action.BOOT_COMPLETED</td>
<td>设备启动完毕</td>
</tr>
<tr>
<td>android.intent.action.DEVICE_STORAGE_LOW</td>
<td>存储空间过低</td>
</tr>
<tr>
<td>android.intent.action.DEVICE_STORAGE_OK</td>
<td>存储空间恢复</td>
</tr>
<tr>
<td>android.intent.action.PACKAGE_ADDED</td>
<td>安装了新的应用</td>
</tr>
<tr>
<td>android.net.wifi.STATE_CHANGE</td>
<td>WiFi 连接状态发生变化</td>
</tr>
<tr>
<td>android.net.wifi.WIFI_STATE_CHANGED</td>
<td>WiFi 状态变为启用/关闭/正在启动/正在关闭/未知</td>
</tr>
<tr>
<td>android.intent.action.BATTERY_CHANGED</td>
<td>电池电量发生变化</td>
</tr>
<tr>
<td>android.intent.action.INPUT_METHOD_CHANGED</td>
<td>系统输入法发生变化</td>
</tr>
<tr>
<td>android.intent.action.ACTION_POWER_CONNECTED</td>
<td>外部电源连接</td>
</tr>
<tr>
<td>android.intent.action.ACTION_POWER_DISCONNECTED</td>
<td>外部电源断开连接</td>
</tr>
<tr>
<td>android.intent.action.DREAMING_STARTED</td>
<td>系统开始休眠</td>
</tr>
<tr>
<td>android.intent.action.DREAMING_STOPPED</td>
<td>系统停止休眠</td>
</tr>
<tr>
<td>android.intent.action.WALLPAPER_CHANGED</td>
<td>壁纸发生变化</td>
</tr>
<tr>
<td>android.intent.action.HEADSET_PLUG</td>
<td>插入耳机</td>
</tr>
<tr>
<td>android.intent.action.MEDIA_UNMOUNTED</td>
<td>卸载外部介质</td>
</tr>
<tr>
<td>android.intent.action.MEDIA_MOUNTED</td>
<td>挂载外部介质</td>
</tr>
<tr>
<td>android.os.action.POWER_SAVE_MODE_CHANGED</td>
<td>省电模式开启</td>
</tr>
</tbody>
</table>
<p><em>（以上广播均可使用 adb 触发）</em></p>
<p><a name="e5bcbae588b6e5819ce6ada2e5ba94e794a8_29"></a><a name="强制停止应用"></a></p>
<h3 id="强制停止应用"><a href="#强制停止应用" class="headerlink" title="强制停止应用"></a>强制停止应用</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am force-stop &lt;packagename&gt;</div></pre></td></tr></table></figure>
<p>命令示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am force-stop com.qihoo360.mobilesafe</div></pre></td></tr></table></figure>
<p>表示停止 360 安全卫士的一切进程与服务。</p>
<p><a name="e69687e4bbb6e7aea1e79086_30"></a><a name="文件管理"></a></p>
<h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p><a name="e5a48de588b6e8aebee5a487e9878ce79a84e69687e4bbb6e588b0e794b5e88491_31"></a><a name="复制设备里的文件到电脑"></a></p>
<h3 id="复制设备里的文件到电脑"><a href="#复制设备里的文件到电脑" class="headerlink" title="复制设备里的文件到电脑"></a>复制设备里的文件到电脑</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</div></pre></td></tr></table></figure>
<p>其中 <code>电脑上的目录</code> 参数可以省略，默认复制到当前目录。</p>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sr.mp4 ~/tmp/</div></pre></td></tr></table></figure>
<p><em>小技巧：</em>设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 <code>adb shell</code> 和 <code>su</code> 命令在 adb shell 里获取 root 权限后，先 <code>cp /path/on/device /sdcard/filename</code> 将文件复制到 sdcard，然后 <code>adb pull /sdcard/filename /path/on/pc</code>。</p>
<p><a name="e5a48de588b6e794b5e88491e9878ce79a84e69687e4bbb6e588b0e8aebee5a487_32"></a><a name="复制电脑里的文件到设备"></a></p>
<h3 id="复制电脑里的文件到设备"><a href="#复制电脑里的文件到设备" class="headerlink" title="复制电脑里的文件到设备"></a>复制电脑里的文件到设备</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</div></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push ~/sr.mp4 /sdcard/</div></pre></td></tr></table></figure>
<p><em>小技巧：</em>设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 <code>adb push /path/on/pc /sdcard/filename</code>，然后 <code>adb shell</code> 和 <code>su</code> 在 adb shell 里获取 root 权限后，<code>cp /sdcard/filename /path/on/device</code>。</p>
<p><a name="e6a8a1e68b9fe68c89e994aee8be93e585a5_33"></a><a name="模拟按键输入"></a></p>
<h2 id="模拟按键-输入"><a href="#模拟按键-输入" class="headerlink" title="模拟按键/输入"></a>模拟按键/输入</h2><p>在 <code>adb shell</code> 里有个很实用的命令叫 <code>input</code>，通过它可以做一些有趣的事情。</p>
<p><code>input</code> 命令的完整 help 信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Usage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]</div><div class="line"></div><div class="line">The sources are:</div><div class="line">      mouse</div><div class="line">      keyboard</div><div class="line">      joystick</div><div class="line">      touchnavigation</div><div class="line">      touchpad</div><div class="line">      trackball</div><div class="line">      stylus</div><div class="line">      dpad</div><div class="line">      gesture</div><div class="line">      touchscreen</div><div class="line">      gamepad</div><div class="line"></div><div class="line">The commands and default sources are:</div><div class="line">      text &lt;string&gt; (Default: touchscreen)</div><div class="line">      keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard)</div><div class="line">      tap &lt;x&gt; &lt;y&gt; (Default: touchscreen)</div><div class="line">      swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)</div><div class="line">      press (Default: trackball)</div><div class="line">      roll &lt;dx&gt; &lt;dy&gt; (Default: trackball)</div></pre></td></tr></table></figure>
<p>比如使用 <code>adb shell input keyevent &lt;keycode&gt;</code> 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 <a href="https://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="external">KeyEvent</a>，摘引部分我觉得有意思的如下：</p>
<table>
<thead>
<tr>
<th>keycode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>3</td>
<td>HOME 键</td>
</tr>
<tr>
<td>4</td>
<td>返回键</td>
</tr>
<tr>
<td>5</td>
<td>打开拨号应用</td>
</tr>
<tr>
<td>6</td>
<td>挂断电话</td>
</tr>
<tr>
<td>24</td>
<td>增加音量</td>
</tr>
<tr>
<td>25</td>
<td>降低音量</td>
</tr>
<tr>
<td>26</td>
<td>电源键</td>
</tr>
<tr>
<td>27</td>
<td>拍照（需要在相机应用里）</td>
</tr>
<tr>
<td>64</td>
<td>打开浏览器</td>
</tr>
<tr>
<td>82</td>
<td>菜单键</td>
</tr>
<tr>
<td>85</td>
<td>播放/暂停</td>
</tr>
<tr>
<td>86</td>
<td>停止播放</td>
</tr>
<tr>
<td>87</td>
<td>播放下一首</td>
</tr>
<tr>
<td>88</td>
<td>播放上一首</td>
</tr>
<tr>
<td>122</td>
<td>移动光标到行首或列表顶部</td>
</tr>
<tr>
<td>123</td>
<td>移动光标到行末或列表底部</td>
</tr>
<tr>
<td>126</td>
<td>恢复播放</td>
</tr>
<tr>
<td>127</td>
<td>暂停播放</td>
</tr>
<tr>
<td>164</td>
<td>静音</td>
</tr>
<tr>
<td>176</td>
<td>打开系统设置</td>
</tr>
<tr>
<td>187</td>
<td>切换应用</td>
</tr>
<tr>
<td>207</td>
<td>打开联系人</td>
</tr>
<tr>
<td>208</td>
<td>打开日历</td>
</tr>
<tr>
<td>209</td>
<td>打开音乐</td>
</tr>
<tr>
<td>210</td>
<td>打开计算器</td>
</tr>
<tr>
<td>220</td>
<td>降低屏幕亮度</td>
</tr>
<tr>
<td>221</td>
<td>提高屏幕亮度</td>
</tr>
<tr>
<td>223</td>
<td>系统休眠</td>
</tr>
<tr>
<td>224</td>
<td>点亮屏幕</td>
</tr>
<tr>
<td>231</td>
<td>打开语音助手</td>
</tr>
<tr>
<td>276</td>
<td>如果没有 wakelock 则让系统休眠</td>
</tr>
</tbody>
</table>
<p>下面是 <code>input</code> 命令的一些用法举例。</p>
<p><a name="e794b5e6ba90e994ae_34"></a><a name="电源键"></a></p>
<h3 id="电源键"><a href="#电源键" class="headerlink" title="电源键"></a>电源键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 26</div></pre></td></tr></table></figure>
<p>执行效果相当于按电源键。</p>
<p><a name="e88f9ce58d95e994ae_35"></a><a name="菜单键"></a></p>
<h3 id="菜单键"><a href="#菜单键" class="headerlink" title="菜单键"></a>菜单键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 82</div></pre></td></tr></table></figure>
<p><a name="home20e994ae_36"></a><a name="home-键"></a></p>
<h3 id="HOME-键"><a href="#HOME-键" class="headerlink" title="HOME 键"></a>HOME 键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 3</div></pre></td></tr></table></figure>
<p><a name="e8bf94e59b9ee994ae_37"></a><a name="返回键"></a></p>
<h3 id="返回键"><a href="#返回键" class="headerlink" title="返回键"></a>返回键</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 4</div></pre></td></tr></table></figure>
<p><a name="e99fb3e9878fe68ea7e588b6_38"></a><a name="音量控制"></a></p>
<h3 id="音量控制"><a href="#音量控制" class="headerlink" title="音量控制"></a>音量控制</h3><p>增加音量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 24</div></pre></td></tr></table></figure>
<p>降低音量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 25</div></pre></td></tr></table></figure>
<p>静音：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 164</div></pre></td></tr></table></figure>
<p><a name="e5aa92e4bd93e68ea7e588b6_39"></a><a name="媒体控制"></a></p>
<h3 id="媒体控制"><a href="#媒体控制" class="headerlink" title="媒体控制"></a>媒体控制</h3><p>播放/暂停：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 85</div></pre></td></tr></table></figure>
<p>停止播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 86</div></pre></td></tr></table></figure>
<p>播放下一首：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 87</div></pre></td></tr></table></figure>
<p>播放上一首：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 88</div></pre></td></tr></table></figure>
<p>恢复播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 126</div></pre></td></tr></table></figure>
<p>暂停播放：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 127</div></pre></td></tr></table></figure>
<p><a name="e782b9e4baaee78684e781ade5b18fe5b995_40"></a><a name="点亮熄灭屏幕"></a></p>
<h3 id="点亮-熄灭屏幕"><a href="#点亮-熄灭屏幕" class="headerlink" title="点亮/熄灭屏幕"></a>点亮/熄灭屏幕</h3><p>可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。</p>
<p>点亮屏幕：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 224</div></pre></td></tr></table></figure>
<p>熄灭屏幕：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 223</div></pre></td></tr></table></figure>
<p><a name="e6bb91e58aa8e8a7a3e99481_41"></a><a name="滑动解锁"></a></p>
<h3 id="滑动解锁"><a href="#滑动解锁" class="headerlink" title="滑动解锁"></a>滑动解锁</h3><p>如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 <code>input swipe</code> 来解锁。</p>
<p>命令（参数以机型 Nexus 5，向上滑动手势解锁举例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input swipe 300 1000 300 500</div></pre></td></tr></table></figure>
<p>参数 <code>300 1000 300 500</code> 分别表示<code>起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标</code>。</p>
<p><a name="e8be93e585a5e69687e69cac_42"></a><a name="输入文本"></a></p>
<h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>在焦点处于某文本框时，可以通过 <code>input</code> 命令来输入文本。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input text hello</div></pre></td></tr></table></figure>
<p>现在 <code>hello</code> 出现在文本框了。</p>
<p><a name="e69fa5e79c8be697a5e5bf97_43"></a><a name="查看日志"></a></p>
<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。</p>
<p><a name="android20e697a5e5bf97_44"></a><a name="android-日志"></a></p>
<h3 id="Android-日志"><a href="#Android-日志" class="headerlink" title="Android 日志"></a>Android 日志</h3><p>命令格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...</div></pre></td></tr></table></figure>
<p>常用用法列举如下：</p>
<p><a name="e68c89e7baa7e588abe8bf87e6bba4e697a5e5bf97_45"></a><a name="按级别过滤日志"></a></p>
<h4 id="按级别过滤日志"><a href="#按级别过滤日志" class="headerlink" title="按级别过滤日志"></a>按级别过滤日志</h4><p>Android 的日志分为如下几个优先级（priority）：</p>
<ul>
<li>V —— Verbose（最低，输出得最多）</li>
<li>D —— Debug</li>
<li>I —— Info</li>
<li>W —— Warning</li>
<li>E —— Error</li>
<li>F —— Fatal</li>
<li>S —— Silent（最高，啥也不输出）</li>
</ul>
<p>按某级别过滤日志则会将该级别及以上的日志输出。</p>
<p>比如，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat *:W</div></pre></td></tr></table></figure>
<p>会将 Warning、Error、Fatal 和 Silent 日志输出。</p>
<p>（<strong>注：</strong> 在 macOS 下需要给 <code>*:W</code> 这样以 <code>*</code> 作为 tag 的参数加双引号，如 <code>adb logcat &quot;*:W&quot;</code>，不然会报错 <code>no matches found: *:W</code>。）</p>
<p><a name="e68c8920tag20e5928ce7baa7e588abe8bf87e6bba4e697a5e5bf97_46"></a><a name="按-tag-和级别过滤日志"></a></p>
<h4 id="按-tag-和级别过滤日志"><a href="#按-tag-和级别过滤日志" class="headerlink" title="按 tag 和级别过滤日志"></a>按 tag 和级别过滤日志</h4><p><code>&lt;filter-spec&gt;</code> 可以由多个 <code>&lt;tag&gt;[:priority]</code> 组成。</p>
<p>比如，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat ActivityManager:I MyApp:D *:S</div></pre></td></tr></table></figure>
<p>表示输出 tag <code>ActivityManager</code> 的 Info 以上级别日志，输出 tag <code>MyApp</code> 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。</p>
<p><a name="e697a5e5bf97e6a0bce5bc8f_47"></a><a name="日志格式"></a></p>
<h4 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h4><p>可以用 <code>adb logcat -v &lt;format&gt;</code> 选项指定日志输出格式。</p>
<p>日志支持按以下几种 <code>&lt;format&gt;</code>：</p>
<ul>
<li><p>brief</p>
<p>默认格式。格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>process</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D( 1785) Disconnected process message: 10, size: 0  (HeadsetStateMachine)</div></pre></td></tr></table></figure>
</li>
<li><p>tag</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D/HeadsetStateMachine: Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>raw</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>time</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>threadtime</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">08-28 22:39:39.974  1785  1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
<li><p>long</p>
<p>格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt; ]</div><div class="line">&lt;message&gt;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 08-28 22:39:39.974  1785: 1832 D/HeadsetStateMachine ]</div><div class="line">Disconnected process message: 10, size: 0</div></pre></td></tr></table></figure>
</li>
</ul>
<p>指定格式可与上面的过滤同时使用。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -v long ActivityManager:I *:S</div></pre></td></tr></table></figure>
<p><a name="e6b885e7a9bae697a5e5bf97_48"></a><a name="清空日志"></a></p>
<h4 id="清空日志"><a href="#清空日志" class="headerlink" title="清空日志"></a>清空日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb logcat -c</div></pre></td></tr></table></figure>
<p><a name="e58685e6a0b8e697a5e5bf97_49"></a><a name="内核日志"></a></p>
<h3 id="内核日志"><a href="#内核日志" class="headerlink" title="内核日志"></a>内核日志</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dmesg</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;6&gt;[14201.684016] PM: noirq resume of devices complete after 0.982 msecs</div><div class="line">&lt;6&gt;[14201.685525] PM: early resume of devices complete after 0.838 msecs</div><div class="line">&lt;6&gt;[14201.753642] PM: resume of devices complete after 68.106 msecs</div><div class="line">&lt;4&gt;[14201.755954] Restarting tasks ... done.</div><div class="line">&lt;6&gt;[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC</div><div class="line">&lt;6&gt;[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC</div><div class="line">&lt;6&gt;[14201.872498] PM: Syncing filesystems ... done.</div></pre></td></tr></table></figure>
<p>中括号里的 <code>[14201.684016]</code> 代表内核开始启动后的时间，单位为秒。</p>
<p>通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 <code>Freeing init memory</code> 那一行前面的时间就是。</p>
<p><a name="e69fa5e79c8be8aebee5a487e4bfa1e681af_50"></a><a name="查看设备信息"></a></p>
<h2 id="查看设备信息"><a href="#查看设备信息" class="headerlink" title="查看设备信息"></a>查看设备信息</h2><p><a name="e59e8be58fb7_51"></a><a name="型号"></a></p>
<h3 id="型号"><a href="#型号" class="headerlink" title="型号"></a>型号</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.product.model</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Nexus 5</div></pre></td></tr></table></figure>
<p><a name="e794b5e6b1a0e78ab6e586b5_52"></a><a name="电池状况"></a></p>
<h3 id="电池状况"><a href="#电池状况" class="headerlink" title="电池状况"></a>电池状况</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys battery</div></pre></td></tr></table></figure>
<p>输入示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Current Battery Service state:</div><div class="line">  AC powered: false</div><div class="line">  USB powered: true</div><div class="line">  Wireless powered: false</div><div class="line">  status: 2</div><div class="line">  health: 2</div><div class="line">  present: true</div><div class="line">  level: 44</div><div class="line">  scale: 100</div><div class="line">  voltage: 3872</div><div class="line">  temperature: 280</div><div class="line">  technology: Li-poly</div></pre></td></tr></table></figure>
<p>其中 <code>scale</code> 代表最大电量，<code>level</code> 代表当前电量。上面的输出表示还剩下 44% 的电量。</p>
<p><a name="e5b18fe5b995e58886e8bea8e78e87_53"></a><a name="屏幕分辨率"></a></p>
<h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Physical size: 1080x1920</div></pre></td></tr></table></figure>
<p>该设备屏幕分辨率为 1080px * 1920px。</p>
<p>如果使用命令修改过，那输出可能是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Physical size: 1080x1920</div><div class="line">Override size: 480x1024</div></pre></td></tr></table></figure>
<p>表明设备的屏幕分辨率原本是 1080px <em> 1920px，当前被修改为 480px </em> 1024px。</p>
<p><a name="e5b18fe5b995e5af86e5baa6_54"></a><a name="屏幕密度"></a></p>
<h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Physical density: 420</div></pre></td></tr></table></figure>
<p>该设备屏幕密度为 420dpi。</p>
<p>如果使用命令修改过，那输出可能是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Physical density: 480</div><div class="line">Override density: 160</div></pre></td></tr></table></figure>
<p>表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。</p>
<p><a name="e698bee7a4bae5b18fe58f82e695b0_55"></a><a name="显示屏参数"></a></p>
<h3 id="显示屏参数"><a href="#显示屏参数" class="headerlink" title="显示屏参数"></a>显示屏参数</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys window displays</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)</div><div class="line">  Display: mDisplayId=0</div><div class="line">    init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731</div><div class="line">    deferred=false layoutNeeded=false</div></pre></td></tr></table></figure>
<p>其中 <code>mDisplayId</code> 为 显示屏编号，<code>init</code> 是初始分辨率和屏幕密度，<code>app</code> 的高度比 <code>init</code> 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。</p>
<p><a name="android_id_56"></a><a name="android_id"></a></p>
<h3 id="android-id"><a href="#android-id" class="headerlink" title="android_id"></a>android_id</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings get secure android_id</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">51b6be48bac8c569</div></pre></td></tr></table></figure>
<p><a name="imei_57"></a><a name="imei"></a></p>
<h3 id="IMEI"><a href="#IMEI" class="headerlink" title="IMEI"></a>IMEI</h3><p>在 Android 4.4 及以下版本可通过如下命令获取 IMEI：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys iphonesubinfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Phone Subscriber Info:</div><div class="line">  Phone Type = GSM</div><div class="line">  Device ID = 860955027785041</div></pre></td></tr></table></figure>
<p>其中的 <code>Device ID</code> 就是 IMEI。</p>
<p>而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">service call iphonesubinfo 1</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Result: Parcel(</div><div class="line">  0x00000000: 00000000 0000000f 00360038 00390030 &apos;........8.6.0.9.&apos;</div><div class="line">  0x00000010: 00350035 00320030 00370037 00350038 &apos;5.5.0.2.7.7.8.5.&apos;</div><div class="line">  0x00000020: 00340030 00000031                   &apos;0.4.1...        &apos;)</div></pre></td></tr></table></figure>
<p>把里面的有效内容提取出来就是 IMEI 了，比如这里的是 <code>860955027785041</code>。</p>
<p>参考：<a href="http://stackoverflow.com/questions/27002663/adb-shell-dumpsys-iphonesubinfo-not-working-since-android-5-0-lollipop" target="_blank" rel="external">adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop</a></p>
<p><a name="android20e7b3bbe7bb9fe78988e69cac_58"></a><a name="android-系统版本"></a></p>
<h3 id="Android-系统版本"><a href="#Android-系统版本" class="headerlink" title="Android 系统版本"></a>Android 系统版本</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell getprop ro.build.version.release</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5.0.2</div></pre></td></tr></table></figure>
<p><a name="ip20e59cb0e59d80_59"></a><a name="ip-地址"></a></p>
<h3 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h3><p>每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ifconfig | grep Mask</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">inet addr:10.130.245.230  Mask:255.255.255.252</div><div class="line">inet addr:127.0.0.1  Mask:255.0.0.0</div></pre></td></tr></table></figure>
<p>那么 <code>10.130.245.230</code> 就是设备 IP 地址。</p>
<p>在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 IP：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ifconfig wlan0</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast]</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wlan0     Link encap:UNSPEC</div><div class="line">          inet addr:10.129.168.57  Bcast:10.129.175.255  Mask:255.255.240.0</div><div class="line">          inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:496520 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:3000</div><div class="line">          RX bytes:116266821 TX bytes:8311736</div></pre></td></tr></table></figure>
<p>如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell netcfg</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">wlan0    UP                               10.129.160.99/20  0x00001043 f8:a9:d0:17:42:4d</div><div class="line">lo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00</div><div class="line">p2p0     UP                                     0.0.0.0/0   0x00001003 fa:a9:d0:17:42:4d</div><div class="line">sit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00</div><div class="line">rmnet0   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet1   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet3   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet2   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet4   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet6   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet5   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rmnet7   DOWN                                   0.0.0.0/0   0x00000000 00:00:00:00:00:00</div><div class="line">rev_rmnet3 DOWN                                   0.0.0.0/0   0x00001002 4e:b7:e4:2e:17:58</div><div class="line">rev_rmnet2 DOWN                                   0.0.0.0/0   0x00001002 4e:f0:c8:bf:7a:cf</div><div class="line">rev_rmnet4 DOWN                                   0.0.0.0/0   0x00001002 a6:c0:3b:6b:c4:1f</div><div class="line">rev_rmnet6 DOWN                                   0.0.0.0/0   0x00001002 66:bb:5d:64:2e:e9</div><div class="line">rev_rmnet5 DOWN                                   0.0.0.0/0   0x00001002 0e:1b:eb:b9:23:a0</div><div class="line">rev_rmnet7 DOWN                                   0.0.0.0/0   0x00001002 7a:d9:f6:81:40:5a</div><div class="line">rev_rmnet8 DOWN                                   0.0.0.0/0   0x00001002 4e:e2:a9:bb:d0:1b</div><div class="line">rev_rmnet0 DOWN                                   0.0.0.0/0   0x00001002 fe:65:d0:ca:82:a9</div><div class="line">rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 da:d8:e8:4f:2e:fe</div></pre></td></tr></table></figure>
<p>可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。</p>
<p><a name="mac20e59cb0e59d80_60"></a><a name="mac-地址"></a></p>
<h3 id="Mac-地址"><a href="#Mac-地址" class="headerlink" title="Mac 地址"></a>Mac 地址</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /sys/class/net/wlan0/address</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f8:a9:d0:17:42:4d</div></pre></td></tr></table></figure>
<p>这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 <code>adb shell netcfg</code> 命令来查看。</p>
<p><a name="cpu20e4bfa1e681af_61"></a><a name="cpu-信息"></a></p>
<h3 id="CPU-信息"><a href="#CPU-信息" class="headerlink" title="CPU 信息"></a>CPU 信息</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /proc/cpuinfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Processor       : ARMv7 Processor rev 0 (v7l)</div><div class="line">processor       : 0</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 1</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 2</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">processor       : 3</div><div class="line">BogoMIPS        : 38.40</div><div class="line"></div><div class="line">Features        : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivt</div><div class="line">CPU implementer : 0x51</div><div class="line">CPU architecture: 7</div><div class="line">CPU variant     : 0x2</div><div class="line">CPU part        : 0x06f</div><div class="line">CPU revision    : 0</div><div class="line"></div><div class="line">Hardware        : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)</div><div class="line">Revision        : 000b</div><div class="line">Serial          : 0000000000000000</div></pre></td></tr></table></figure>
<p>这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 <code>Qualcomm MSM 8974</code>，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 <code>ARMv7 Processor rev 0 (v71)</code>。</p>
<p><a name="e58685e5ad98e4bfa1e681af_62"></a><a name="内存信息"></a></p>
<h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /proc/meminfo</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">MemTotal:        1027424 kB</div><div class="line">MemFree:          486564 kB</div><div class="line">Buffers:           15224 kB</div><div class="line">Cached:            72464 kB</div><div class="line">SwapCached:        24152 kB</div><div class="line">Active:           110572 kB</div><div class="line">Inactive:         259060 kB</div><div class="line">Active(anon):      79176 kB</div><div class="line">Inactive(anon):   207736 kB</div><div class="line">Active(file):      31396 kB</div><div class="line">Inactive(file):    51324 kB</div><div class="line">Unevictable:        3948 kB</div><div class="line">Mlocked:               0 kB</div><div class="line">HighTotal:        409600 kB</div><div class="line">HighFree:         132612 kB</div><div class="line">LowTotal:         617824 kB</div><div class="line">LowFree:          353952 kB</div><div class="line">SwapTotal:        262140 kB</div><div class="line">SwapFree:         207572 kB</div><div class="line">Dirty:                 0 kB</div><div class="line">Writeback:             0 kB</div><div class="line">AnonPages:        265324 kB</div><div class="line">Mapped:            47072 kB</div><div class="line">Shmem:              1020 kB</div><div class="line">Slab:              57372 kB</div><div class="line">SReclaimable:       7692 kB</div><div class="line">SUnreclaim:        49680 kB</div><div class="line">KernelStack:        4512 kB</div><div class="line">PageTables:         5912 kB</div><div class="line">NFS_Unstable:          0 kB</div><div class="line">Bounce:                0 kB</div><div class="line">WritebackTmp:          0 kB</div><div class="line">CommitLimit:      775852 kB</div><div class="line">Committed_AS:   13520632 kB</div><div class="line">VmallocTotal:     385024 kB</div><div class="line">VmallocUsed:       61004 kB</div><div class="line">VmallocChunk:     209668 kB</div></pre></td></tr></table></figure>
<p>其中，<code>MemTotal</code> 就是设备的总内存，<code>MemFree</code> 是当前空闲内存。</p>
<p><a name="e69bb4e5a49ae7a1ace4bbb6e4b88ee7b3bbe7bb9fe5b19ee680a7_63"></a><a name="更多硬件与系统属性"></a></p>
<h3 id="更多硬件与系统属性"><a href="#更多硬件与系统属性" class="headerlink" title="更多硬件与系统属性"></a>更多硬件与系统属性</h3><p>设备的更多硬件与系统属性可以通过如下命令查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /system/build.prop</div></pre></td></tr></table></figure>
<p>这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。</p>
<p>输出里还包括一些其它有用的信息，它们也可通过 <code>adb shell getprop &lt;属性名&gt;</code> 命令单独查看，列举一部分属性如下：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ro.build.version.sdk</td>
<td>SDK 版本</td>
</tr>
<tr>
<td>ro.build.version.release</td>
<td>Android 系统版本</td>
</tr>
<tr>
<td>ro.build.version.security_patch</td>
<td>Android 安全补丁程序级别</td>
</tr>
<tr>
<td>ro.product.model</td>
<td>型号</td>
</tr>
<tr>
<td>ro.product.brand</td>
<td>品牌</td>
</tr>
<tr>
<td><a href="http://ro.product.name" target="_blank" rel="external">ro.product.name</a></td>
<td>设备名</td>
</tr>
<tr>
<td>ro.product.board</td>
<td>处理器型号</td>
</tr>
<tr>
<td>ro.product.cpu.abilist</td>
<td>CPU 支持的 abi 列表[<em>节注一</em>]</td>
</tr>
<tr>
<td>persist.sys.isUsbOtgEnabled</td>
<td>是否支持 OTG</td>
</tr>
<tr>
<td>dalvik.vm.heapsize</td>
<td>每个应用程序的内存上限</td>
</tr>
<tr>
<td>ro.sf.lcd_density</td>
<td>屏幕密度</td>
</tr>
</tbody>
</table>
<p><em>节注一：</em></p>
<p>一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 <code>ro.product.cpu.abilist</code> 属性名查找不到，可以这样试试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell cat /system/build.prop | grep ro.product.cpu.abi</div></pre></td></tr></table></figure>
<p>示例输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ro.product.cpu.abi=armeabi-v7a</div><div class="line">ro.product.cpu.abi2=armeabi</div></pre></td></tr></table></figure>
<p><a name="e4bfaee694b9e8aebee7bdae_64"></a><a name="修改设置"></a></p>
<h2 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h2><p><strong>注：</strong> 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 <code>adb reboot</code> 重启设备，或手动重启。</p>
<p>修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。</p>
<p><a name="e58886e8bea8e78e87_65"></a><a name="分辨率"></a></p>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size 480x1024</div></pre></td></tr></table></figure>
<p>表示将分辨率修改为 480px * 1024px。</p>
<p>恢复原分辨率命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm size reset</div></pre></td></tr></table></figure>
<p><a name="e5b18fe5b995e5af86e5baa6_66"></a><a name="屏幕密度"></a></p>
<h3 id="屏幕密度-1"><a href="#屏幕密度-1" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density 160</div></pre></td></tr></table></figure>
<p>表示将屏幕密度修改为 160dpi。</p>
<p>恢复原屏幕密度命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm density reset</div></pre></td></tr></table></figure>
<p><a name="e698bee7a4bae58cbae59f9f_67"></a><a name="显示区域"></a></p>
<h3 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a>显示区域</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan 0,0,0,200</div></pre></td></tr></table></figure>
<p>四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。</p>
<p>恢复原显示区域命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell wm overscan reset</div></pre></td></tr></table></figure>
<p><a name="e585b3e997ad20usb20e8b083e8af95e6a8a1e5bc8f_68"></a><a name="关闭-usb-调试模式"></a></p>
<h3 id="关闭-USB-调试模式"><a href="#关闭-USB-调试模式" class="headerlink" title="关闭 USB 调试模式"></a>关闭 USB 调试模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global adb_enabled 0</div></pre></td></tr></table></figure>
<p>恢复：</p>
<p>用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。</p>
<p>去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。</p>
<p><a name="e78ab6e68081e6a08fe5928ce5afbce888aae6a08fe79a84e698bee7a4bae99a90e8978f_69"></a><a name="状态栏和导航栏的显示隐藏"></a></p>
<h3 id="状态栏和导航栏的显示隐藏"><a href="#状态栏和导航栏的显示隐藏" class="headerlink" title="状态栏和导航栏的显示隐藏"></a>状态栏和导航栏的显示隐藏</h3><p>本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control &lt;key-values&gt;</div></pre></td></tr></table></figure>
<p><code>&lt;key-values&gt;</code> 可由如下几种键及其对应的值组成，格式为 <code>&lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;</code>。</p>
<table>
<thead>
<tr>
<th>key</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>immersive.full</td>
<td>同时隐藏</td>
</tr>
<tr>
<td>immersive.status</td>
<td>隐藏状态栏</td>
</tr>
<tr>
<td>immersive.navigation</td>
<td>隐藏导航栏</td>
</tr>
<tr>
<td>immersive.preconfirms</td>
<td>?</td>
</tr>
</tbody>
</table>
<p>这些键对应的值可则如下值用逗号组合：</p>
<table>
<thead>
<tr>
<th>value</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>apps</code></td>
<td>所有应用</td>
</tr>
<tr>
<td><code>*</code></td>
<td>所有界面</td>
</tr>
<tr>
<td><code>packagename</code></td>
<td>指定应用</td>
</tr>
<tr>
<td><code>-packagename</code></td>
<td>排除指定应用</td>
</tr>
</tbody>
</table>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.full=*</div></pre></td></tr></table></figure>
<p>表示设置在所有界面下都同时隐藏状态栏和导航栏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3</div></pre></td></tr></table></figure>
<p>表示设置在包名为 <code>com.package1</code> 和 <code>com.package2</code> 的应用里隐藏状态栏，在除了包名为 <code>com.package3</code> 的所有应用里隐藏导航栏。</p>
<p><a name="e5ae9ee794a8e58a9fe883bd_70"></a><a name="实用功能"></a></p>
<h2 id="实用功能"><a href="#实用功能" class="headerlink" title="实用功能"></a>实用功能</h2><p><a name="e5b18fe5b995e688aae59bbe_71"></a><a name="屏幕截图"></a></p>
<h3 id="屏幕截图"><a href="#屏幕截图" class="headerlink" title="屏幕截图"></a>屏幕截图</h3><p>截图保存到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb exec-out screencap -p &gt; sc.png</div></pre></td></tr></table></figure>
<p>如果 adb 版本较老，无法使用 <code>exec-out</code> 命令，这时候建议更新 adb 版本。无法更新的话可以使用以下麻烦点的办法：</p>
<p>先截图保存到设备里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>然后将 png 文件导出到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/sc.png</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screencap -h</code> 查看 <code>screencap</code> 命令的帮助信息，下面是两个有意义的参数及含义：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>指定保存文件为 png 格式</td>
</tr>
<tr>
<td>-d display-id</td>
<td>指定截图的显示屏编号（有多显示屏的情况下）</td>
</tr>
</tbody>
</table>
<p>实测如果指定文件名以 <code>.png</code> 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。</p>
<p>另外一种一行命令截图并保存到电脑的方法：</p>
<p><em>Linux 和 Windows</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | sed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure>
<p><em>Mac OS X</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screencap -p | gsed &quot;s/\r$//&quot; &gt; sc.png</div></pre></td></tr></table></figure>
<p>这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 <a href="http://gnuwin32.sourceforge.net/packages/sed.htm" target="_blank" rel="external">sed for Windows</a> 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。</p>
<p>而在 Mac 下使用系统自带的 sed 命令会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed: RE error: illegal byte sequence</div></pre></td></tr></table></figure>
<p>需要安装 gnu-sed，然后使用 gsed 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gnu-sed</div></pre></td></tr></table></figure>
<p><a name="e5bd95e588b6e5b18fe5b995_72"></a><a name="录制屏幕"></a></p>
<h3 id="录制屏幕"><a href="#录制屏幕" class="headerlink" title="录制屏幕"></a>录制屏幕</h3><p>录制屏幕以 mp4 格式保存到 /sdcard：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell screenrecord /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>需要停止时按 <kbd>Ctrl-C</kbd>，默认录制时间和最长录制时间都是 180 秒。</p>
<p>如果需要导出到电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /sdcard/filename.mp4</div></pre></td></tr></table></figure>
<p>可以使用 <code>adb shell screenrecord --help</code> 查看 <code>screenrecord</code> 命令的帮助信息，下面是常见参数及含义：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>–size WIDTHxHEIGHT</td>
<td>视频的尺寸，比如 <code>1280x720</code>，默认是屏幕分辨率。</td>
</tr>
<tr>
<td>–bit-rate RATE</td>
<td>视频的比特率，默认是 4Mbps。</td>
</tr>
<tr>
<td>–time-limit TIME</td>
<td>录制时长，单位秒。</td>
</tr>
<tr>
<td>–verbose</td>
<td>输出更多信息。</td>
</tr>
</tbody>
</table>
<p><a name="e9878de696b0e68c82e8bdbd20system20e58886e58cbae4b8bae58fafe58699_73"></a><a name="重新挂载-system-分区为可写"></a></p>
<h3 id="重新挂载-system-分区为可写"><a href="#重新挂载-system-分区为可写" class="headerlink" title="重新挂载 system 分区为可写"></a>重新挂载 system 分区为可写</h3><p><strong>注：需要 root 权限。</strong></p>
<p>/system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。</p>
<p>步骤：</p>
<ol>
<li><p>进入 shell 并切换到 root 用户权限。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
</li>
<li><p>查看当前分区挂载情况。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">rootfs / rootfs ro,relatime 0 0</div><div class="line">tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0</div><div class="line">devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0</div><div class="line">proc /proc proc rw,relatime 0 0</div><div class="line">sysfs /sys sysfs rw,seclabel,relatime 0 0</div><div class="line">selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0</div><div class="line">debugfs /sys/kernel/debug debugfs rw,relatime 0 0</div><div class="line">none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0</div><div class="line">none /acct cgroup rw,relatime,cpuacct 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0</div><div class="line">none /dev/memcg cgroup rw,relatime,memory 0 0</div><div class="line">none /dev/cpuctl cgroup rw,relatime,cpu 0 0</div><div class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0</div><div class="line">none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0</div><div class="line">none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0</div><div class="line">/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div><div class="line">/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0</div></pre></td></tr></table></figure>
<p>找到其中我们关注的带 /system 的那一行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0</div></pre></td></tr></table></figure>
</li>
<li><p>重新挂载。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system</div></pre></td></tr></table></figure>
<p>这里的 <code>/dev/block/platform/msm_sdcc.1/by-name/system</code> 就是我们从上一步的输出里得到的文件路径。</p>
</li>
</ol>
<p>如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。</p>
<p><a name="e69fa5e79c8be8bf9ee68ea5e8bf87e79a8420wifi20e5af86e7a081_74"></a><a name="查看连接过的-wifi-密码"></a></p>
<h3 id="查看连接过的-WiFi-密码"><a href="#查看连接过的-WiFi-密码" class="headerlink" title="查看连接过的 WiFi 密码"></a>查看连接过的 WiFi 密码</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">cat /data/misc/wifi/*.conf</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">network=&#123;</div><div class="line">    ssid=&quot;TP-LINK_9DFC&quot;</div><div class="line">    scan_ssid=1</div><div class="line">    psk=&quot;123456789&quot;</div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    group=CCMP TKIP</div><div class="line">    auth_alg=OPEN</div><div class="line">    sim_num=1</div><div class="line">    priority=13893</div><div class="line">&#125;</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">    ssid=&quot;TP-LINK_F11E&quot;</div><div class="line">    psk=&quot;987654321&quot;</div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    sim_num=1</div><div class="line">    priority=17293</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ssid</code> 即为我们在 WLAN 设置里看到的名称，<code>psk</code> 为密码，<code>key_mgmt</code> 为安全加密方式。</p>
<p><a name="e8aebee7bdaee7b3bbe7bb9fe697a5e69c9fe5928ce697b6e997b4_75"></a><a name="设置系统日期和时间"></a></p>
<h3 id="设置系统日期和时间"><a href="#设置系统日期和时间" class="headerlink" title="设置系统日期和时间"></a>设置系统日期和时间</h3><p><strong>注：需要 root 权限。</strong></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div><div class="line">date -s 20160823.131500</div></pre></td></tr></table></figure>
<p>表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。</p>
<p><a name="e9878de590afe6898be69cba_76"></a><a name="重启手机"></a></p>
<h3 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<p><a name="e6a380e6b58be8aebee5a487e698afe590a6e5b7b220root_77"></a><a name="检测设备是否已-root"></a></p>
<h3 id="检测设备是否已-root"><a href="#检测设备是否已-root" class="headerlink" title="检测设备是否已 root"></a>检测设备是否已 root</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb shell</div><div class="line">su</div></pre></td></tr></table></figure>
<p>此时命令行提示符是 <code>$</code> 则表示没有 root 权限，是 <code>#</code> 则表示已 root。</p>
<p><a name="e4bdbfe794a820monkey20e8bf9be8a18ce58e8be58a9be6b58be8af95_78"></a><a name="使用-monkey-进行压力测试"></a></p>
<h3 id="使用-Monkey-进行压力测试"><a href="#使用-Monkey-进行压力测试" class="headerlink" title="使用 Monkey 进行压力测试"></a>使用 Monkey 进行压力测试</h3><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p>
<p>简单用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey -p &lt;packagename&gt; -v 500</div></pre></td></tr></table></figure>
<p>表示向 <code>&lt;packagename&gt;</code> 指定的应用程序发送 500 个伪随机事件。</p>
<p>Monkey 的详细用法参考 <a href="https://developer.android.com/studio/test/monkey.html" target="_blank" rel="external">官方文档</a>。</p>
<p><a name="e5bc80e590afe585b3e997ad20wifi_79"></a><a name="开启关闭-wifi"></a></p>
<h3 id="开启-关闭-WiFi"><a href="#开启-关闭-WiFi" class="headerlink" title="开启/关闭 WiFi"></a>开启/关闭 WiFi</h3><p><strong>注：需要 root 权限。</strong></p>
<p>有时需要控制设备的 WiFi 状态，可以用以下指令完成。</p>
<p>开启 WiFi：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi enable</div></pre></td></tr></table></figure>
<p>关闭 WiFi：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb root</div><div class="line">adb shell svc wifi disable</div></pre></td></tr></table></figure>
<p>若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 <code>Killed</code>。</p>
<p><a name="e588b7e69cbae79bb8e585b3e591bde4bba4_80"></a><a name="刷机相关命令"></a></p>
<h2 id="刷机相关命令"><a href="#刷机相关命令" class="headerlink" title="刷机相关命令"></a>刷机相关命令</h2><p><a name="e9878de590afe588b020recovery20e6a8a1e5bc8f_81"></a><a name="重启到-recovery-模式"></a></p>
<h3 id="重启到-Recovery-模式"><a href="#重启到-Recovery-模式" class="headerlink" title="重启到 Recovery 模式"></a>重启到 Recovery 模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
<p><a name="e4bb8e20recovery20e9878de590afe588b020android_82"></a><a name="从-recovery-重启到-android"></a></p>
<h3 id="从-Recovery-重启到-Android"><a href="#从-Recovery-重启到-Android" class="headerlink" title="从 Recovery 重启到 Android"></a>从 Recovery 重启到 Android</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot</div></pre></td></tr></table></figure>
<p><a name="e9878de590afe588b020fastboot20e6a8a1e5bc8f_83"></a><a name="重启到-fastboot-模式"></a></p>
<h3 id="重启到-Fastboot-模式"><a href="#重启到-Fastboot-模式" class="headerlink" title="重启到 Fastboot 模式"></a>重启到 Fastboot 模式</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot bootloader</div></pre></td></tr></table></figure>
<p><a name="e9809ae8bf8720sideload20e69bb4e696b0e7b3bbe7bb9f_84"></a><a name="通过-sideload-更新系统"></a></p>
<h3 id="通过-sideload-更新系统"><a href="#通过-sideload-更新系统" class="headerlink" title="通过 sideload 更新系统"></a>通过 sideload 更新系统</h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p>
<p>以 Recovery 模式下更新为例：</p>
<ol>
<li><p>重启到 Recovery 模式。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb reboot recovery</div></pre></td></tr></table></figure>
</li>
<li><p>在设备的 Recovery 界面上操作进入 <code>Apply update</code>-<code>Apply from ADB</code>。</p>
<p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 <code>Apply update from ADB</code>。</p>
</li>
<li><p>通过 adb 上传和更新系统。</p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb sideload &lt;path-to-update.zip&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a name="e69bb4e5a49a20adb20shell20e591bde4bba4_85"></a><a name="更多-adb-shell-命令"></a></p>
<h2 id="更多-adb-shell-命令"><a href="#更多-adb-shell-命令" class="headerlink" title="更多 adb shell 命令"></a>更多 adb shell 命令</h2><p>Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 <code>adb shell</code> 里可以调用。本文档前面的部分内容已经用到了 <code>adb shell</code> 命令。</p>
<p><a name="e69fa5e79c8be8bf9be7a88b_86"></a><a name="查看进程"></a></p>
<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell ps</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC        NAME</div><div class="line">root      1     0     8904   788   ffffffff 00000000 S /init</div><div class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</div><div class="line">...</div><div class="line">u0_a71    7779  5926  1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classic</div><div class="line">u0_a58    7963  5926  1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure</div><div class="line">...</div><div class="line">shell     8750  217   10640  740   00000000 b6f28340 R ps</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>USER</td>
<td>所属用户</td>
</tr>
<tr>
<td>PID</td>
<td>进程 ID</td>
</tr>
<tr>
<td>PPID</td>
<td>父进程 ID</td>
</tr>
<tr>
<td>NAME</td>
<td>进程名</td>
</tr>
</tbody>
</table>
<p><a name="e69fa5e79c8be5ae9ee697b6e8b584e6ba90e58da0e794a8e68385e586b5_87"></a><a name="查看实时资源占用情况"></a></p>
<h3 id="查看实时资源占用情况"><a href="#查看实时资源占用情况" class="headerlink" title="查看实时资源占用情况"></a>查看实时资源占用情况</h3><p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell top</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">User 0%, System 6%, IOW 0%, IRQ 0%</div><div class="line">User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307</div><div class="line"></div><div class="line">  PID PR CPU% S  #THR     VSS     RSS PCY UID      Name</div><div class="line"> 8763  0   3% R     1  10640K   1064K  fg shell    top</div><div class="line">  131  0   3% S     1      0K      0K  fg root     dhd_dpc</div><div class="line"> 6144  0   0% S   115 1682004K 115916K  fg system   system_server</div><div class="line">  132  0   0% S     1      0K      0K  fg root     dhd_rxf</div><div class="line"> 1731  0   0% S     6  20288K    788K  fg root     /system/bin/mpdecision</div><div class="line">  217  0   0% S     6  18008K    356K  fg shell    /sbin/adbd</div><div class="line"> ...</div><div class="line"> 7779  2   0% S    19 1538748K  48896K  bg u0_a71   com.sohu.inputmethod.sogou:classic</div><div class="line"> 7963  0   0% S    18 1561916K  59568K  fg u0_a58   org.mazhuang.boottimemeasure</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>各列含义：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PID</td>
<td>进程 ID</td>
</tr>
<tr>
<td>PR</td>
<td>优先级</td>
</tr>
<tr>
<td>CPU%</td>
<td>当前瞬间占用 CPU 百分比</td>
</tr>
<tr>
<td>S</td>
<td>进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</td>
</tr>
<tr>
<td>#THR</td>
<td>线程数</td>
</tr>
<tr>
<td>VSS</td>
<td>Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td>RSS</td>
<td>Resident Set Size 实际使用物理内存（包含共享库占用的内存）</td>
</tr>
<tr>
<td>PCY</td>
<td>调度策略优先级，SP_BACKGROUND/SPFOREGROUND</td>
</tr>
<tr>
<td>UID</td>
<td>进程所有者的用户 ID</td>
</tr>
<tr>
<td>NAME</td>
<td>进程名</td>
</tr>
</tbody>
</table>
<p><code>top</code> 命令还支持一些命令行参数，详细用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</div><div class="line">    -m num  最多显示多少个进程</div><div class="line">    -n num  刷新多少次后退出</div><div class="line">    -d num  刷新时间间隔（单位秒，默认值 5）</div><div class="line">    -s col  按某列排序（可用 col 值：cpu, vss, rss, thr）</div><div class="line">    -t      显示线程信息</div><div class="line">    -h      显示帮助文档</div></pre></td></tr></table></figure>
<p><a name="e585b6e5ae83_88"></a><a name="其它"></a></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>cat</td>
<td>显示文件内容</td>
</tr>
<tr>
<td>cd</td>
<td>切换目录</td>
</tr>
<tr>
<td>chmod</td>
<td>改变文件的存取模式/访问权限</td>
</tr>
<tr>
<td>df</td>
<td>查看磁盘空间使用情况</td>
</tr>
<tr>
<td>grep</td>
<td>过滤输出</td>
</tr>
<tr>
<td>kill</td>
<td>杀死指定 PID 的进程</td>
</tr>
<tr>
<td>ls</td>
<td>列举目录内容</td>
</tr>
<tr>
<td>mount</td>
<td>挂载目录的查看和管理</td>
</tr>
<tr>
<td>mv</td>
<td>移动或重命名文件</td>
</tr>
<tr>
<td>ps</td>
<td>查看正在运行的进程</td>
</tr>
<tr>
<td>rm</td>
<td>删除文件</td>
</tr>
<tr>
<td>top</td>
<td>查看进程的资源占用情况</td>
</tr>
</tbody>
</table>
<p><a name="e5b8b8e8a781e997aee9a298_89"></a><a name="常见问题"></a></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><a name="e590afe58aa820adb20server20e5a4b1e8b4a5_90"></a><a name="启动-adb-server-失败"></a></p>
<h3 id="启动-adb-server-失败"><a href="#启动-adb-server-失败" class="headerlink" title="启动 adb server 失败"></a>启动 adb server 失败</h3><p><strong>出错提示</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error: protocol fault (couldn&apos;t read status): No error</div></pre></td></tr></table></figure>
<p><strong>可能原因</strong></p>
<p>adb server 进程想使用的 5037 端口被占用。</p>
<p><strong>解决方案</strong></p>
<p>找到占用 5037 端口的进程，然后终止它。以 Windows 下为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">netstat -ano | findstr LISTENING</div><div class="line"></div><div class="line">...</div><div class="line">TCP    0.0.0.0:5037           0.0.0.0:0              LISTENING       1548</div><div class="line">...</div></pre></td></tr></table></figure>
<p>这里 1548 即为进程 ID，用命令结束该进程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">taskkill /PID 1548</div></pre></td></tr></table></figure>
<p>然后再启动 adb 就没问题了。</p>
<p><a name="adb20e79a84e99d9ee5ae98e696b9e5ae9ee78eb0_91"></a><a name="adb-的非官方实现"></a></p>
<h2 id="adb-的非官方实现"><a href="#adb-的非官方实现" class="headerlink" title="adb 的非官方实现"></a>adb 的非官方实现</h2><ul>
<li><a href="https://github.com/facebook/fb-adb" target="_blank" rel="external">fb-adb</a> - A better shell for Android devices (for Mac).</li>
</ul>
<p><a name="e887b4e8b0a2_92"></a><a name="致谢"></a></p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢朋友们无私的分享与补充（排名不分先后）。</p>
<p><a href="https://github.com/zxning" target="_blank" rel="external">zxning</a>，<a href="https://github.com/linhua55" target="_blank" rel="external">linhua55</a>，<a href="https://github.com/codeskyblue" target="_blank" rel="external">codeskyblue</a>，<a href="https://github.com/seasonyuu" target="_blank" rel="external">seasonyuu</a>，<a href="https://github.com/fan123199" target="_blank" rel="external">fan123199</a>，<a href="https://github.com/zhEdward" target="_blank" rel="external">zhEdward</a>，<a href="https://github.com/0x8BADFOOD" target="_blank" rel="external">0x8BADFOOD</a>，<a href="https://github.com/keith666666" target="_blank" rel="external">keith666666</a>。</p>
<p><a name="e58f82e88083e993bee68ea5_93"></a><a name="参考链接"></a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://developer.android.com/studio/command-line/adb.html" target="_blank" rel="external">Android Debug Bridge</a></li>
<li><a href="https://developer.android.com/studio/command-line/shell.html" target="_blank" rel="external">ADB Shell Commands</a></li>
<li><a href="https://developer.android.com/studio/command-line/logcat.html" target="_blank" rel="external">logcat Command-line Tool</a></li>
<li><a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html" target="_blank" rel="external">Android ADB命令大全</a></li>
<li><a href="https://github.com/ZQiang94/StudyRecords/blob/master/other/src/main/java/com/other/adb%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95.md" target="_blank" rel="external">adb 命令行的使用记录</a></li>
<li><a href="http://www.jianshu.com/p/860bc2bf1a6a" target="_blank" rel="external">Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等)</a></li>
<li><a href="http://yifeiyuan.me/2016/06/30/ADB%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/" target="_blank" rel="external">那些做Android开发必须知道的ADB命令</a></li>
<li><a href="http://blog.csdn.net/kittyboy0001/article/details/38562515" target="_blank" rel="external">adb shell top</a></li>
<li><a href="http://cabins.github.io/2016/03/25/UseAdbLikeAPro-2/" target="_blank" rel="external">像高手一样使用ADB命令行（2）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;adb&lt;a name=&quot;adb_1&quot;&gt;&lt;/a&gt;&lt;a name=&quot;adb&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;adb&quot;&gt;&lt;a href=&quot;#adb&quot; class=&quot;headerlink&quot; title=&quot;adb&quot;&gt;&lt;/a&gt;adb&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;
    
    </summary>
    
      <category term="安卓" scheme="https://www.xncoding.com/categories/%E5%AE%89%E5%8D%93/"/>
    
    
      <category term="刷机" scheme="https://www.xncoding.com/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy</title>
    <link href="https://www.xncoding.com/2017/11/02/python/sqlalchemy.html"/>
    <id>https://www.xncoding.com/2017/11/02/python/sqlalchemy.html</id>
    <published>2017-11-02T14:41:45.000Z</published>
    <updated>2017-11-02T14:44:08.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqlalchemy"><a href="#sqlalchemy" class="headerlink" title="sqlalchemy"></a>sqlalchemy</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import sqlalchemy</div><div class="line">import sqlalchemy.orm</div><div class="line">import sqlalchemy.ext.declarative</div><div class="line"># 利用数据库字符串构造engine, echo为True将打印所有的sql语句, 其他数据库的链接方式可自行百度</div><div class="line"># engine = sqlalchemy.create_engine(&quot;mysql+pymysql://username:password@hostname/dbname&quot;, encoding=&quot;utf8&quot;, echo=True)</div><div class="line">engine = sqlalchemy.create_engine(&quot;mysql+pymysql://dba_0:mimadba_0@101.200.174.172/data_secret&quot;, encoding=&quot;utf8&quot;, echo=False)</div></pre></td></tr></table></figure>
<h2 id="利用engine创建connection-因为使用了with所以不需要close操作"><a href="#利用engine创建connection-因为使用了with所以不需要close操作" class="headerlink" title="利用engine创建connection,因为使用了with所以不需要close操作"></a>利用engine创建connection,因为使用了with所以不需要close操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">with engine.connect() as conn:</div><div class="line">    # 最基础的用法</div><div class="line">    result = conn.execute(&quot;select * from tablename limit 10;&quot;)</div><div class="line">    for item in result:</div><div class="line">        print(item)</div><div class="line"></div><div class="line">    # execute的几种用法,这里具体还是得参考pymysql的用法,不需要执行commit操作</div><div class="line">    conn.execute(&quot;insert into tablename(id, url, title) values(1, &apos;url1&apos;, &apos;title1&apos;);&quot;)</div><div class="line">    conn.execute(&quot;insert into tablename(id, url, title) values(%s, %s, %s);&quot;, 2, &quot;url2&quot;, &quot;title2&quot;)</div><div class="line">    conn.execute(&quot;insert into tablename(id, url, title) values(%s, %s, %s)&quot;, (3, &quot;url3&quot;, &quot;title3&quot;))</div><div class="line">    conn.execute(&quot;insert into tablename(id, url, title) values(%s, %s, %s)&quot;, [(31, &quot;url31&quot;, &quot;title31&quot;), (32, &quot;url32&quot;, &quot;title32&quot;)])</div><div class="line"></div><div class="line">    # 使用事务可以进行批量提交和回滚</div><div class="line">    trans = conn.begin()</div><div class="line">    try:</div><div class="line">        conn.execute(&quot;insert into tablename(id, url, title) values(%s, %s, %s)&quot;, [(4, &quot;url4&quot;, &quot;title4&quot;), (5, &quot;url5&quot;, &quot;title5&quot;)])</div><div class="line">        trans.commit()</div><div class="line">    except Exception as excep:</div><div class="line">        trans.rollback()</div><div class="line">        raise</div><div class="line">        trans.close()</div></pre></td></tr></table></figure>
<h2 id="model"><a href="#model" class="headerlink" title="model"></a>model</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"># 首先需要生成一个BaseModel类,作为所有模型类的基类</div><div class="line">BaseModel = sqlalchemy.ext.declarative.declarative_base()</div><div class="line"></div><div class="line"># 构建数据模型User</div><div class="line">class User(BaseModel):</div><div class="line">    __tablename__ = &quot;Users&quot;         # 表名</div><div class="line">    __table_args__ = &#123;</div><div class="line">        &quot;mysql_engine&quot;: &quot;InnoDB&quot;,   # 表的引擎</div><div class="line">        &quot;mysql_charset&quot;: &quot;utf8&quot;,    # 表的编码格式</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # 表结构,具体更多的数据类型自行百度</div><div class="line">    id = sqlalchemy.Column(&quot;id&quot;, sqlalchemy.Integer, primary_key=True, autoincrement=True)</div><div class="line">    name = sqlalchemy.Column(&quot;name&quot;, sqlalchemy.String(50), nullable=False)</div><div class="line">    age = sqlalchemy.Column(&quot;age&quot;, sqlalchemy.Integer, default=0)</div><div class="line"></div><div class="line">    # 添加角色id外键,关联到表Roles的id属性</div><div class="line">    role_id = sqlalchemy.Column(&quot;role_id&quot;, sqlalchemy.Integer, sqlalchemy.ForeignKey(&quot;Roles.id&quot;))</div><div class="line"></div><div class="line">    # 添加关系属性,关联到本实例的role_id外键属性上</div><div class="line">    role = sqlalchemy.orm.relationship(&quot;Role&quot;, foreign_keys=&quot;User.role_id&quot;)</div><div class="line"></div><div class="line">    # 添加关系属性,关联到本实例的role_id外键属性上,如果使用了这种方式,Role模型中的users可以省略</div><div class="line">    # role = sqlalchemy.orm.relationship(&quot;Role&quot;, foreign_keys=&quot;User.role_id&quot;, backref=sqlalchemy.orm.backref(&quot;users&quot;))</div><div class="line"></div><div class="line"></div><div class="line"># 构建数据模型Role</div><div class="line">class Role(BaseModel):</div><div class="line">    __tablename__ = &quot;Roles&quot;         # 表名</div><div class="line">    __table_args__ = &#123;</div><div class="line">        &quot;mysql_engine&quot;: &quot;InnoDB&quot;,   # 表的引擎</div><div class="line">        &quot;mysql_charset&quot;: &quot;utf8&quot;,    # 表的编码格式</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # 表结构,具体更多的数据类型自行百度</div><div class="line">    id = sqlalchemy.Column(&quot;id&quot;, sqlalchemy.Integer, primary_key=True)</div><div class="line">    name = sqlalchemy.Column(&quot;name&quot;, sqlalchemy.String(50), unique=True)</div><div class="line"></div><div class="line">    # 添加关系属性,关联到实例User的role_id外键属性上</div><div class="line">    users = sqlalchemy.orm.relationship(&quot;User&quot;, foreign_keys=&quot;User.role_id&quot;)</div></pre></td></tr></table></figure>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><pre><code># 利用Session对象连接数据库
DBSessinon = sqlalchemy.orm.sessionmaker(bind=engine)   # 创建会话类
session = DBSessinon()                                  # 创建会话对象


# 删除所有表
BaseModel.metadata.drop_all(engine)
# 创建所有表,如果表已经存在,则不会创建
BaseModel.metadata.create_all(engine)

try:
    # 清空数据,不需要commit操作
    session.query(User).filter(User.id != -1).delete()
    session.query(Role).filter(Role.id != -1).delete()
    # 删除数据的另外一种形式:session.delete()

    # 插入数据,这里的一个实例只插入一次,第二次插入不生效
    session.add(Role(id=1, name=&quot;student&quot;))
    session.add(Role(id=2, name=&quot;teacher&quot;))
    session.commit()

    session.add(User(name=&quot;James&quot;, age=20, role_id=1))
    session.add(User(name=&quot;Wade&quot;, age=40, role_id=2))
    session.commit()

    user = User(name=&quot;Kobe&quot;, age=24, role_id=1)
    session.add(user)
    session.commit()

    # 修改数据
    user.name = &quot;Allen&quot;
    session.merge(user)                         # 使用merge方法,如果存在则修改,如果不存在则插入
    session.query(User).filter(User.id == user.id).update({User.name: &quot;Allen&quot;})         # 使用update方法
    session.query(User).filter(User.id == user.id).update({User.age: User.age + 1})     # 使用update方法,自增操作

    # 查询数据
    roles = session.query(Role)                 # 返回全部结果
    for role in roles:
        print(&quot;Role:&quot;, role.id, role.name)

    users = session.query(User)                 # 返回全部结果
    for user in users:
        print(&quot;User:&quot;, user.id, user.name, user.age, user.role_id)

    # 其他获取数据的方式
    print(&quot;get(id):&quot;, session.query(User).get(1))                       # 返回结果集中id为1的项
    print(&quot;get[1:3]:&quot;, session.query(User)[1:3])                        # 返回结果集中的第2-3项

    # 其他高级查询,这里以Users表为例
    users = session.query(User).filter(User.id &gt; 6)                     # 条件查询
    users = session.query(User).filter(User.id &gt; 6).all()               # 条件查询,返回查询的全部数据
    user = session.query(User).filter(User.id &gt; 6).first()              # 条件查询,返回查询数据的第一项
    users = session.query(User).filter(User.id &gt; 6).limit(10)           # 条件查询,返回最多10条数据
    users = session.query(User).filter(User.id &gt; 6).offset(2)           # 条件查询,从第3条数据开始返回

    users = session.query(User).filter(User.id &gt; 6, User.name == &quot;Kobe&quot;)                    # 条件查询,and操作
    users = session.query(User).filter(User.id &gt; 6).filter(User.name == &quot;Kobe&quot;)             # 条件查询,and操作
    users = session.query(User).filter(sqlalchemy.or_(User.id &gt; 6, User.name == &quot;Kobe&quot;))    # 条件查询,or操作
    users = session.query(User).filter(User.id.in_((1, 2)))                                 # 条件查询,in操作
    users = session.query(User).filter(sqlalchemy.not_(User.name))                          # 条件查询,not操作

    user_count = session.query(User.id).count()                                             # 统计全部user的数量
    user_count = session.query(sqlalchemy.func.count(User.id)).scalar()                     # scalar操作返回第一行数据的第一个字段
    session.query(sqlalchemy.func.count(&quot;*&quot;)).select_from(User).scalar()                    # scalar操作返回第一行数据的第一个字段
    session.query(sqlalchemy.func.count(1)).select_from(User).scalar()                      # scalar操作返回第一行数据的第一个字段
    session.query(sqlalchemy.func.count(User.id)).filter(User.id &gt; 0).scalar()              # filter() 中包含 User，因此不需要指定表

    session.query(sqlalchemy.func.sum(User.age)).scalar()                                   # 求和运算,运用scalar函数
    session.query(sqlalchemy.func.avg(User.age)).scalar()                                   # 求均值运算,运用scalar函数
    session.query(sqlalchemy.func.md5(User.name)).filter(User.id == 1).scalar()             # 运用md5函数

    users = session.query(sqlalchemy.distinct(User.name))               # 去重查询,根据name进行去重
    users = session.query(User).order_by(User.name)                     # 排序查询,正序查询
    users = session.query(User).order_by(User.name.desc())              # 排序查询,倒序查询
    users = session.query(User).order_by(sqlalchemy.desc(User.name))    # 排序查询,倒序查询的另外一种形式

    users = session.query(User.id, User.name)                           # 只查询部分属性
    users = session.query(User.name.label(&quot;user_name&quot;))                 # 结果集的列取别名
    for user in users:
        print(&quot;label test:&quot;, user.user_name)                            # 这里使用别名

    users = session.query(sqlalchemy.func.count(User.name).label(&quot;count&quot;), User.age).group_by(User.age)    # 分组查询
    for user in users:
        print(&quot;age:{0}, count:{1}&quot;.format(user.age, user.count))

    # 多表查询
    result = session.query(User, Role).filter(User.role_id == Role.id)
    for user, role in result:
        print(&quot;user %s&apos;s role is %s&quot; % (user.name, role.name))
    users = session.query(User).join(Role, User.role_id == Role.id)
    for user in users:
        print(&quot;user join, name:&quot;, user.name)

    # 关联属性的用法
    roles = session.query(Role)
    for role in roles:
        print(&quot;role:%s users:&quot; % role.name)
        for user in role.users:
            print(&quot;\t%s&quot; % user.name)
    users = session.query(User)
    for user in users:
        print(&quot;user %s&apos;s role is %s&quot; % (user.name, user.role.name))

except Exception as excep:
    session.rollback()
    raise

session.close()
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;sqlalchemy&quot;&gt;&lt;a href=&quot;#sqlalchemy&quot; class=&quot;headerlink&quot; title=&quot;sqlalchemy&quot;&gt;&lt;/a&gt;sqlalchemy&lt;/h1&gt;&lt;h2 id=&quot;连接&quot;&gt;&lt;a href=&quot;#连接&quot; class=&quot;headerli
    
    </summary>
    
      <category term="python" scheme="https://www.xncoding.com/categories/python/"/>
    
    
      <category term="数据库" scheme="https://www.xncoding.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="orm" scheme="https://www.xncoding.com/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://www.xncoding.com/2017/11/01/test.html"/>
    <id>https://www.xncoding.com/2017/11/01/test.html</id>
    <published>2017-11-01T14:41:45.000Z</published>
    <updated>2017-11-25T09:13:11.175Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">test=&quot;(&apos;0&apos;,&apos;!LZX&apos;,&apos;\\x00\\x00\\x00\\x00\\x66\\xe7\\x85\\x47&apos;,&apos;3b58a39341b3e74d93cc7dd083e634d0d5f92779b9d9f5fd64e9a76c49e3167d201ed432c172732f933fff1ad7e35c00b8e5996ded003d87&apos;,&apos;2&apos;)&quot;</div><div class="line">eval(test)</div></pre></td></tr></table></figure>
<p>第三个变了
‘\’转义符在命令行参数输入中的错误
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys.path[0]</div></pre></td></tr></table></figure></p>
<p>当前目录
以在app端使用低反爬、高加密保证正常用户的使用，在web端通过高反爬(如ip、访问频率等)、低加密来阻止爬虫。
onclick”属性曝露了处理参数值的函数名称，before_submit, do_encrypt()</p>
<p>dism /online /export-driver /destination:D:\MyDrivers
Dism /online /Add-Driver /Driver:D:\MyDrivers /Recurse</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;c
    
    </summary>
    
      <category term="test" scheme="https://www.xncoding.com/categories/test/"/>
    
    
      <category term="test" scheme="https://www.xncoding.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Python 魔法方法</title>
    <link href="https://www.xncoding.com/2017/10/23/python/Python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/Python 魔法方法.html</id>
    <published>2017-10-23T14:59:48.872Z</published>
    <updated>2018-03-29T23:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><strong>new</strong>(cls[, …])</p>
<ol>
<li><strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法</li>
<li>它的第一个参数是这个类，其他的参数是用来直接传递给 <strong>init</strong> 方法</li>
<li><strong>new</strong> 决定是否要使用该 <strong>init</strong> 方法，因为 <strong>new</strong> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <strong>new</strong> 没有返回实例对象，则 <strong>init</strong> 不会被调用</li>
<li><strong>new</strong> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string </li>
</ol>
<h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><table>
<thead>
<tr>
<th>魔法方法</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>init</strong>(self[, …])</td>
<td>构造器，当一个实例被创建的时候调用的初始化方法</td>
</tr>
<tr>
<td><strong>del</strong>(self)</td>
<td>析构器，当一个实例被销毁的时候调用的方法</td>
</tr>
<tr>
<td><strong>call</strong>(self[, args…])</td>
<td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b)</td>
</tr>
<tr>
<td><strong>len</strong>(self)</td>
<td>定义当被 len() 调用时的行为</td>
</tr>
<tr>
<td><strong>repr</strong>(self)</td>
<td>定义当被 repr() 调用时的行为</td>
</tr>
<tr>
<td><strong>str</strong>(self)</td>
<td>定义当被 str() 调用时的行为</td>
</tr>
<tr>
<td><strong>bytes</strong>(self)</td>
<td>定义当被 bytes() 调用时的行为</td>
</tr>
<tr>
<td><strong>hash</strong>(self)</td>
<td>定义当被 hash() 调用时的行为</td>
</tr>
<tr>
<td><strong>bool</strong>(self)</td>
<td>定义当被 bool() 调用时的行为，应该返回 True 或 False</td>
</tr>
<tr>
<td><strong>format</strong>(self, format_spec)</td>
<td>定义当被 format() 调用时的行为</td>
</tr>
</tbody>
</table>
<h2 id="有关属性"><a href="#有关属性" class="headerlink" title="有关属性"></a>有关属性</h2><table>
<thead>
<tr>
<th></th>
<th>有关属性</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>getattr</strong>(self, name)</td>
<td>定义当用户试图获取一个不存在的属性时的行为</td>
</tr>
<tr>
<td><strong>getattribute</strong>(self, name)</td>
<td>定义当该类的属性被访问时的行为</td>
</tr>
<tr>
<td><strong>setattr</strong>(self, name, value)</td>
<td>定义当一个属性被设置时的行为</td>
</tr>
<tr>
<td><strong>delattr</strong>(self, name)</td>
<td>定义当一个属性被删除时的行为</td>
</tr>
<tr>
<td><strong>dir</strong>(self)</td>
<td>定义当 dir() 被调用时的行为</td>
</tr>
<tr>
<td><strong>get</strong>(self, instance, owner)</td>
<td>定义当描述符的值被取得时的行为</td>
</tr>
<tr>
<td><strong>set</strong>(self, instance, value)</td>
<td>定义当描述符的值被改变时的行为</td>
</tr>
<tr>
<td><strong>delete</strong>(self, instance)</td>
<td>定义当描述符的值被删除时的行为</td>
</tr>
</tbody>
</table>
<h2 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h2><table>
<thead>
<tr>
<th></th>
<th>比较操作符</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>lt</strong>(self, other)</td>
<td>定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y)</td>
</tr>
<tr>
<td><strong>le</strong>(self, other)</td>
<td>定义小于等于号的行为：x &lt;= y 调用 x.<strong>le</strong>(y)</td>
</tr>
<tr>
<td><strong>eq</strong>(self, other)</td>
<td>定义等于号的行为：x == y 调用 x.<strong>eq</strong>(y)</td>
</tr>
<tr>
<td><strong>ne</strong>(self, other)</td>
<td>定义不等号的行为：x != y 调用 x.<strong>ne</strong>(y)</td>
</tr>
<tr>
<td><strong>gt</strong>(self, other)</td>
<td>定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y)</td>
</tr>
<tr>
<td><strong>ge</strong>(self, other)</td>
<td>定义大于等于号的行为：x &gt;= y 调用 x.<strong>ge</strong>(y)</td>
</tr>
</tbody>
</table>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table>
<thead>
<tr>
<th></th>
<th>算数运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>add</strong>(self, other)</td>
<td>定义加法的行为：+</td>
</tr>
<tr>
<td><strong>sub</strong>(self, other)</td>
<td>定义减法的行为：-</td>
</tr>
<tr>
<td><strong>mul</strong>(self, other)</td>
<td>定义乘法的行为：*</td>
</tr>
<tr>
<td><strong>truediv</strong>(self, other)</td>
<td>定义真除法的行为：/</td>
</tr>
<tr>
<td><strong>floordiv</strong>(self, other)</td>
<td>定义整数除法的行为：//</td>
</tr>
<tr>
<td><strong>mod</strong>(self, other)</td>
<td>定义取模算法的行为：%</td>
</tr>
<tr>
<td><strong>divmod</strong>(self, other)</td>
<td>定义当被 divmod() 调用时的行为</td>
</tr>
<tr>
<td><strong>pow</strong>(self, other[, modulo])</td>
<td>定义当被 power() 调用或 ** 运算时的行为</td>
</tr>
<tr>
<td><strong>lshift</strong>(self, other)</td>
<td>定义按位左移位的行为：&lt;&lt;</td>
</tr>
<tr>
<td><strong>rshift</strong>(self, other)</td>
<td>定义按位右移位的行为：&gt;&gt;</td>
</tr>
<tr>
<td><strong>and</strong>(self, other)</td>
<td>定义按位与操作的行为：&amp;</td>
</tr>
<tr>
<td><strong>xor</strong>(self, other)</td>
<td>定义按位异或操作的行为：^</td>
</tr>
<tr>
<td><strong>or</strong>(self, other)</td>
<td>定义按位或操作的行为：</td>
</tr>
</tbody>
</table>
<h2 id="反运算"><a href="#反运算" class="headerlink" title="反运算"></a>反运算</h2><table>
<thead>
<tr>
<th></th>
<th>反运算</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>radd</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rsub</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rmul</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rtruediv</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rfloordiv</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rmod</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rdivmod</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rpow</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rlshift</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rrshift</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>rxor</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
<tr>
<td><strong>ror</strong>(self, other)</td>
<td>（与上方相同，当左操作数不支持相应的操作时被调用）</td>
</tr>
</tbody>
</table>
<h2 id="增量赋值运算"><a href="#增量赋值运算" class="headerlink" title="增量赋值运算"></a>增量赋值运算</h2><table>
<thead>
<tr>
<th></th>
<th>增量赋值运算</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>iadd</strong>(self, other)</td>
<td>定义赋值加法的行为：+=</td>
</tr>
<tr>
<td><strong>isub</strong>(self, other)</td>
<td>定义赋值减法的行为：-=</td>
</tr>
<tr>
<td><strong>imul</strong>(self, other)</td>
<td>定义赋值乘法的行为：*=</td>
</tr>
<tr>
<td><strong>itruediv</strong>(self, other)</td>
<td>定义赋值真除法的行为：/=</td>
</tr>
<tr>
<td><strong>ifloordiv</strong>(self, other)</td>
<td>定义赋值整数除法的行为：//=</td>
</tr>
<tr>
<td><strong>imod</strong>(self, other)</td>
<td>定义赋值取模算法的行为：%=</td>
</tr>
<tr>
<td><strong>ipow</strong>(self, other[, modulo])</td>
<td>定义赋值幂运算的行为：**=</td>
</tr>
<tr>
<td><strong>ilshift</strong>(self, other)</td>
<td>定义赋值按位左移位的行为：&lt;&lt;=</td>
</tr>
<tr>
<td><strong>irshift</strong>(self, other)</td>
<td>定义赋值按位右移位的行为：&gt;&gt;=</td>
</tr>
<tr>
<td><strong>iand</strong>(self, other)</td>
<td>定义赋值按位与操作的行为：&amp;=</td>
</tr>
<tr>
<td><strong>ixor</strong>(self, other)</td>
<td>定义赋值按位异或操作的行为：^=</td>
</tr>
<tr>
<td><strong>ior</strong>(self, other)</td>
<td>定义赋值按位或操作的行为：</td>
<td>=</td>
</tr>
</tbody>
</table>
<h2 id="一元操作符"><a href="#一元操作符" class="headerlink" title="一元操作符"></a>一元操作符</h2><table>
<thead>
<tr>
<th></th>
<th>一元操作符</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>neg</strong>(self)</td>
<td>定义正号的行为：+x</td>
</tr>
<tr>
<td><strong>pos</strong>(self)</td>
<td>定义负号的行为：-x</td>
</tr>
<tr>
<td><strong>abs</strong>(self)</td>
<td>定义当被 abs() 调用时的行为</td>
</tr>
<tr>
<td><strong>invert</strong>(self)</td>
<td>定义按位求反的行为：~x</td>
</tr>
</tbody>
</table>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><table>
<thead>
<tr>
<th></th>
<th>类型转换</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>complex</strong>(self)</td>
<td>定义当被 complex() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong>int</strong>(self)</td>
<td>定义当被 int() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong>float</strong>(self)</td>
<td>定义当被 float() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong>round</strong>(self[, n])</td>
<td>定义当被 round() 调用时的行为（需要返回恰当的值）</td>
</tr>
<tr>
<td><strong>index</strong>(self)</td>
<td>1. 当对象是被应用在切片表达式中时，实现整形强制转换 2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong> 3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值</td>
</tr>
</tbody>
</table>
<h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2><table>
<thead>
<tr>
<th></th>
<th>上下文管理（with 语句）</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>enter</strong>(self)</td>
<td>1. 定义当使用 with 语句时的初始化行为</td>
</tr>
</tbody>
</table>
<p>2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定 |
| <strong>exit</strong>(self, exc_type, exc_value, traceback) | 1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么
2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作 |</p>
<h2 id="容器类型"><a href="#容器类型" class="headerlink" title="容器类型"></a>容器类型</h2><table>
<thead>
<tr>
<th></th>
<th>容器类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>len</strong>(self)</td>
<td>定义当被 len() 调用时的行为（返回容器中元素的个数）</td>
</tr>
<tr>
<td><strong>getitem</strong>(self, key)</td>
<td>定义获取容器中指定元素的行为，相当于 self[key]</td>
</tr>
<tr>
<td><strong>setitem</strong>(self, key, value)</td>
<td>定义设置容器中指定元素的行为，相当于 self[key] = value</td>
</tr>
<tr>
<td><strong>delitem</strong>(self, key)</td>
<td>定义删除容器中指定元素的行为，相当于 del self[key]</td>
</tr>
<tr>
<td><strong>iter</strong>(self)</td>
<td>定义当迭代容器中的元素的行为</td>
</tr>
<tr>
<td><strong>reversed</strong>(self)</td>
<td>定义当被 reversed() 调用时的行为</td>
</tr>
<tr>
<td><strong>contains</strong>(self, item)</td>
<td>定义当使用成员测试运算符（in 或 not in）时的行为</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;new&quot;&gt;&lt;a href=&quot;#new&quot; class=&quot;headerlink&quot; title=&quot;new&quot;&gt;&lt;/a&gt;new&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;new&lt;/strong&gt;(cls[, …])&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt; 是
    
    </summary>
    
    
      <category term="魔法方法" scheme="https://www.xncoding.com/tags/%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>装饰器</title>
    <link href="https://www.xncoding.com/2017/10/23/python/%E8%A3%85%E9%A5%B0%E5%99%A8.html"/>
    <id>https://www.xncoding.com/2017/10/23/python/装饰器.html</id>
    <published>2017-10-23T13:07:53.939Z</published>
    <updated>2018-03-29T23:25:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-中装饰器的使用"><a href="#Python-中装饰器的使用" class="headerlink" title="Python 中装饰器的使用"></a>Python 中装饰器的使用</h1><p><code>import functools</code></p>
<h2 id="构建不带参数的装饰器"><a href="#构建不带参数的装饰器" class="headerlink" title="构建不带参数的装饰器"></a>构建不带参数的装饰器</h2><pre><code>def logging(func):
    @functools.wraps(func)
    def decorator(*args, **kwargs):
        print(&quot;%s called&quot; % func.__name__)
        result = func(*args, **kwargs)
        print(&quot;%s end&quot; % func.__name__)
        return result
    return decorator


# 使用装饰器
@logging
def test01(a, b):
    print(&quot;in function test01, a=%s, b=%s&quot; % (a, b))
    return 1

# 使用装饰器
@logging
def test02(a, b, c=1):
    print(&quot;in function test02, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建带参数的装饰器"><a href="#构建带参数的装饰器" class="headerlink" title="构建带参数的装饰器"></a>构建带参数的装饰器</h2><pre><code>def params_chack(*types, **kwtypes):
    def _outer(func):
        @functools.wraps(func)
        def _inner(*args, **kwargs):
            result = [isinstance(_param, _type) for _param, _type in zip(args, types)]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            result = [isinstance(kwargs[_param], kwtypes[_param]) for _param in kwargs if _param in kwtypes]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            return func(*args, **kwargs)
        return _inner
    return _outer


# 使用装饰器
@params_chack(int, (list, tuple))
def test03(a, b):
    print(&quot;in function test03, a=%s, b=%s&quot; % (a, b))
    return 1


# 使用装饰器
@params_chack(int, str, c=(int, str))
def test04(a, b, c):
    print(&quot;in function test04, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1


## 在类的成员方法中使用装饰器
class ATest(object):
    @params_chack(object, int, str)
    def test(self, a, b):
        print(&quot;in function test of ATest, a=%s, b=%s&quot; % (a, b))
        return 1


# 同时使用多个装饰器
@logging
@params_chack(int, str, (list, tuple))
def test05(a, b, c):
    print(&quot;in function test05, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建不带参数的装饰器类"><a href="#构建不带参数的装饰器类" class="headerlink" title="构建不带参数的装饰器类"></a>构建不带参数的装饰器类</h2><pre><code>class Decorator(object):

    def __init__(self, func):
        self.func = func
        return

    def __call__(self, *args, **kwargs):
        print(&quot;%s called&quot; % self.func.__name__)
        result = self.func(*args, **kwargs)
        print(&quot;%s end&quot; % self.func.__name__)
        return result


# 使用装饰器
@Decorator
def test06(a, b, c):
    print(&quot;in function test06, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><h2 id="构建带参数的装饰器类"><a href="#构建带参数的装饰器类" class="headerlink" title="构建带参数的装饰器类"></a>构建带参数的装饰器类</h2><pre><code>class ParamCheck(object):

    def __init__(self, *types, **kwtypes):
        self.types = types
        self.kwtypes = kwtypes
        return

    def __call__(self, func):
        @functools.wraps(func)
        def _inner(*args, **kwargs):
            result = [isinstance(_param, _type) for _param, _type in zip(args, self.types)]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            result = [isinstance(kwargs[_param], self.kwtypes[_param]) for _param in kwargs if _param in self.kwtypes]
            assert all(result), &quot;params_chack: invalid parameters&quot;
            return func(*args, **kwargs)
        return _inner


# 使用装饰器
@ParamCheck(int, str, (list, tuple))
def test07(a, b, c):
    print(&quot;in function test06, a=%s, b=%s, c=%s&quot; % (a, b, c))
    return 1
</code></pre><p>##例子</p>
<h3 id="装饰器实例-函数缓存"><a href="#装饰器实例-函数缓存" class="headerlink" title="装饰器实例: 函数缓存"></a>装饰器实例: 函数缓存</h3><pre><code>def funccache(func):
    cache = {}

    @functools.wraps(func)
    def _inner(*args):
        if args not in cache:
            cache[args] = func(*args)
        return cache[args]
    return _inner


# 使用装饰器
@funccache
def test08(a, b, c):
    # 其他复杂或耗时计算
    return a + b + c
</code></pre><h3 id="使用Python自带的装饰器-property"><a href="#使用Python自带的装饰器-property" class="headerlink" title="使用Python自带的装饰器 @property"></a>使用Python自带的装饰器 @property</h3><pre><code>class People(object):

    def __init__(self):
        self._name = None
        self._age = None
        return

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name
        return

    @property
    def age(self):
        return self._age

    @age.setter
    def age(self, age):
        assert 0 &lt; age &lt; 120
        self._age = age
        return
</code></pre><h3 id="类静态方法和类方法"><a href="#类静态方法和类方法" class="headerlink" title="类静态方法和类方法"></a>类静态方法和类方法</h3><pre><code>class Date(object):
    &quot;&quot;&quot;docstring for Date&quot;&quot;&quot;
    __slots__ = (&apos;year&apos;,&apos;month&apos;,&apos;day&apos;)
    def __init__(self, year=0,month=0,day=0):
        self.year = year
        self.month = month
        self.day = day

    @property
    def time(self):
        return &apos;{}-{}-{}&apos;.format(self.year,self.month,self.day)

    @classmethod
    def time_from_string(cls,string):
        year,month,day=string.split(&apos;-&apos;)
        date = cls(year,month,day)
        return date

    @staticmethod
    def check_time(year,month,day):
        year,month,day = map(int,[year,month,day])
        if 1970&lt;year&lt;2018 and 0&lt;month&lt;13 and 0&lt;day&lt;32:
            return year, month, day
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Python-中装饰器的使用&quot;&gt;&lt;a href=&quot;#Python-中装饰器的使用&quot; class=&quot;headerlink&quot; title=&quot;Python 中装饰器的使用&quot;&gt;&lt;/a&gt;Python 中装饰器的使用&lt;/h1&gt;&lt;p&gt;&lt;code&gt;import functools
    
    </summary>
    
    
      <category term="装饰器，类静态方法和类方法" scheme="https://www.xncoding.com/tags/%E8%A3%85%E9%A5%B0%E5%99%A8%EF%BC%8C%E7%B1%BB%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
</feed>
